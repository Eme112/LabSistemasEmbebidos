
Lab06_2_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000008fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000434  00000d30  00020434  2**2
                  ALLOC
  3 .stack        00002004  2000048c  00000d88  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a5ea  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089e  00000000  00000000  0002aa9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c55  00000000  00000000  0002b33d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000118  00000000  00000000  0002bf92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  0002c0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000113a6  00000000  00000000  0002c19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001edb  00000000  00000000  0003d540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006eff5  00000000  00000000  0003f41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000042c  00000000  00000000  000ae410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	90 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	000008fc 	.word	0x000008fc

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	000008fc 	.word	0x000008fc
 10c:	000008fc 	.word	0x000008fc
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	000008fc 	.word	0x000008fc
 1ac:	20000000 	.word	0x20000000
 1b0:	20000434 	.word	0x20000434
 1b4:	20000434 	.word	0x20000434
 1b8:	2000048c 	.word	0x2000048c
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	00000705 	.word	0x00000705
 1d8:	0000040d 	.word	0x0000040d

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <I2C_Init>:

void UARTInit(void);

void I2C_Init() {
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 1ec:	4a23      	ldr	r2, [pc, #140]	; (27c <I2C_Init+0x90>)
 1ee:	6a11      	ldr	r1, [r2, #32]
 1f0:	4b23      	ldr	r3, [pc, #140]	; (280 <I2C_Init+0x94>)
 1f2:	400b      	ands	r3, r1
 1f4:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration */
	PORT->Group[0].PINCFG[PIN_PA22].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SDA */
 1f6:	4b23      	ldr	r3, [pc, #140]	; (284 <I2C_Init+0x98>)
 1f8:	2207      	movs	r2, #7
 1fa:	2156      	movs	r1, #86	; 0x56
 1fc:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[PIN_PA23].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_INEN | PORT_PINCFG_PULLEN; /* SCL */
 1fe:	3101      	adds	r1, #1
 200:	545a      	strb	r2, [r3, r1]
	
	/* PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[11].reg |= 0x02u;
 202:	391c      	subs	r1, #28
 204:	5c5a      	ldrb	r2, [r3, r1]
 206:	2002      	movs	r0, #2
 208:	4302      	orrs	r2, r0
 20a:	b2d2      	uxtb	r2, r2
 20c:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[11].reg |= 0x20u;
 20e:	5c5a      	ldrb	r2, [r3, r1]
 210:	2020      	movs	r0, #32
 212:	4302      	orrs	r2, r0
 214:	b2d2      	uxtb	r2, r2
 216:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM3;
 218:	4a1b      	ldr	r2, [pc, #108]	; (288 <I2C_Init+0x9c>)
 21a:	6a13      	ldr	r3, [r2, #32]
 21c:	391b      	subs	r1, #27
 21e:	430b      	orrs	r3, r1
 220:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom3 module*/
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_CORE) |
 222:	4b1a      	ldr	r3, [pc, #104]	; (28c <I2C_Init+0xa0>)
 224:	4a1a      	ldr	r2, [pc, #104]	; (290 <I2C_Init+0xa4>)
 226:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID (SERCOM3_GCLK_ID_SLOW) |
	GCLK_CLKCTRL_GEN(4) |
	GCLK_CLKCTRL_CLKEN;
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_SRC_OSC8M|GCLK_GENCTRL_GENEN|GCLK_GENCTRL_ID(4);
 228:	6859      	ldr	r1, [r3, #4]
 22a:	4a1a      	ldr	r2, [pc, #104]	; (294 <I2C_Init+0xa8>)
 22c:	430a      	orrs	r2, r1
 22e:	605a      	str	r2, [r3, #4]

	/* set configuration for SERCOM3 I2C module */
	SERCOM3->I2CM.CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN; /* smart mode enable */
 230:	2280      	movs	r2, #128	; 0x80
 232:	0052      	lsls	r2, r2, #1
 234:	4b18      	ldr	r3, [pc, #96]	; (298 <I2C_Init+0xac>)
 236:	605a      	str	r2, [r3, #4]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 238:	4b17      	ldr	r3, [pc, #92]	; (298 <I2C_Init+0xac>)
 23a:	69db      	ldr	r3, [r3, #28]
 23c:	2b00      	cmp	r3, #0
 23e:	d1fb      	bne.n	238 <I2C_Init+0x4c>
	
	/* calculate BAUDRATE */
	uint64_t tmp_baud =((8000000/100000)-10-(8000000*250 /1000000000))/2;
	SERCOM3->I2CM.BAUD.bit.BAUD = SERCOM_I2CM_BAUD_BAUD((uint32_t)tmp_baud);
 240:	4915      	ldr	r1, [pc, #84]	; (298 <I2C_Init+0xac>)
 242:	68ca      	ldr	r2, [r1, #12]
 244:	33ff      	adds	r3, #255	; 0xff
 246:	439a      	bics	r2, r3
 248:	3bdd      	subs	r3, #221	; 0xdd
 24a:	4313      	orrs	r3, r2
 24c:	60cb      	str	r3, [r1, #12]
	while (SERCOM3->I2CM.SYNCBUSY.reg); // waiting loading
 24e:	4b12      	ldr	r3, [pc, #72]	; (298 <I2C_Init+0xac>)
 250:	69db      	ldr	r3, [r3, #28]
 252:	2b00      	cmp	r3, #0
 254:	d1fb      	bne.n	24e <I2C_Init+0x62>
	// value equals 0x22 or decimal 34
	
	SERCOM3->I2CM.CTRLA.reg = SERCOM_I2CM_CTRLA_ENABLE   |/* enable module */
 256:	4a11      	ldr	r2, [pc, #68]	; (29c <I2C_Init+0xb0>)
 258:	4b0f      	ldr	r3, [pc, #60]	; (298 <I2C_Init+0xac>)
 25a:	601a      	str	r2, [r3, #0]
	SERCOM_I2CM_CTRLA_MODE_I2C_MASTER |		/* i2c master mode */
	SERCOM_I2CM_CTRLA_SDAHOLD(3);		 /* SDA hold time to 600ns */
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 25c:	4b0e      	ldr	r3, [pc, #56]	; (298 <I2C_Init+0xac>)
 25e:	69db      	ldr	r3, [r3, #28]
 260:	2b00      	cmp	r3, #0
 262:	d1fb      	bne.n	25c <I2C_Init+0x70>

	SERCOM3->I2CM.STATUS.reg |= SERCOM_I2CM_STATUS_BUSSTATE(1); /* set to idle state */
 264:	4a0c      	ldr	r2, [pc, #48]	; (298 <I2C_Init+0xac>)
 266:	8b53      	ldrh	r3, [r2, #26]
 268:	2110      	movs	r1, #16
 26a:	430b      	orrs	r3, r1
 26c:	b29b      	uxth	r3, r3
 26e:	8353      	strh	r3, [r2, #26]
	while (SERCOM3->I2CM.SYNCBUSY.reg);  /* waiting loading */
 270:	4b09      	ldr	r3, [pc, #36]	; (298 <I2C_Init+0xac>)
 272:	69db      	ldr	r3, [r3, #28]
 274:	2b00      	cmp	r3, #0
 276:	d1fb      	bne.n	270 <I2C_Init+0x84>
}
 278:	4770      	bx	lr
 27a:	46c0      	nop			; (mov r8, r8)
 27c:	40000800 	.word	0x40000800
 280:	fffffcff 	.word	0xfffffcff
 284:	41004400 	.word	0x41004400
 288:	40000400 	.word	0x40000400
 28c:	40000c00 	.word	0x40000c00
 290:	00004417 	.word	0x00004417
 294:	00010604 	.word	0x00010604
 298:	42001400 	.word	0x42001400
 29c:	00300016 	.word	0x00300016

000002a0 <SendI2CData>:

void SendI2CData(uint8_t Data) {
	/* placing the data from transmitting buffer to DATA register*/
	SERCOM3->I2CM.DATA.reg = Data;
 2a0:	2328      	movs	r3, #40	; 0x28
 2a2:	4a03      	ldr	r2, [pc, #12]	; (2b0 <SendI2CData+0x10>)
 2a4:	54d0      	strb	r0, [r2, r3]
	while(!SERCOM3->I2CM.INTFLAG.bit.MB){}; /* MB = 1 if slave NACKS the address */
 2a6:	4b02      	ldr	r3, [pc, #8]	; (2b0 <SendI2CData+0x10>)
 2a8:	7e1b      	ldrb	r3, [r3, #24]
 2aa:	07db      	lsls	r3, r3, #31
 2ac:	d5fb      	bpl.n	2a6 <SendI2CData+0x6>
}
 2ae:	4770      	bx	lr
 2b0:	42001400 	.word	0x42001400

000002b4 <StopCond>:

void StopCond() {
	/* Sending stop condition */
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 2b4:	4a03      	ldr	r2, [pc, #12]	; (2c4 <StopCond+0x10>)
 2b6:	6851      	ldr	r1, [r2, #4]
 2b8:	23c0      	movs	r3, #192	; 0xc0
 2ba:	029b      	lsls	r3, r3, #10
 2bc:	430b      	orrs	r3, r1
 2be:	6053      	str	r3, [r2, #4]
}
 2c0:	4770      	bx	lr
 2c2:	46c0      	nop			; (mov r8, r8)
 2c4:	42001400 	.word	0x42001400

000002c8 <sendI2CDataArray>:

void sendI2CDataArray(uint8_t SlAddr, uint8_t ptr, uint8_t* ptrData, uint8_t Size) {
 2c8:	b570      	push	{r4, r5, r6, lr}
 2ca:	0016      	movs	r6, r2
 2cc:	001d      	movs	r5, r3
	/******************  SENDING SEQUENCE  **********************/
	// Sending 4 bytes to an RTC. First Byte is the pointer of the RTC memory.
	/* slave address with write signal (0) */
	SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 0;    /* Sending slave address in write mode */
 2ce:	0040      	lsls	r0, r0, #1
 2d0:	4b09      	ldr	r3, [pc, #36]	; (2f8 <sendI2CDataArray+0x30>)
 2d2:	6258      	str	r0, [r3, #36]	; 0x24
	while(!SERCOM3->I2CM.INTFLAG.bit.MB);		   /* MB = 1 if slave NACKS the address */
 2d4:	4b08      	ldr	r3, [pc, #32]	; (2f8 <sendI2CDataArray+0x30>)
 2d6:	7e1b      	ldrb	r3, [r3, #24]
 2d8:	07db      	lsls	r3, r3, #31
 2da:	d5fb      	bpl.n	2d4 <sendI2CDataArray+0xc>
	
	SendI2CData(ptr);
 2dc:	0008      	movs	r0, r1
 2de:	4b07      	ldr	r3, [pc, #28]	; (2fc <sendI2CDataArray+0x34>)
 2e0:	4798      	blx	r3
	for(int i=0; i<Size; i++) {
 2e2:	2400      	movs	r4, #0
 2e4:	e003      	b.n	2ee <sendI2CDataArray+0x26>
		SendI2CData(ptrData[i]);
 2e6:	5d30      	ldrb	r0, [r6, r4]
 2e8:	4b04      	ldr	r3, [pc, #16]	; (2fc <sendI2CDataArray+0x34>)
 2ea:	4798      	blx	r3
	for(int i=0; i<Size; i++) {
 2ec:	3401      	adds	r4, #1
 2ee:	42ac      	cmp	r4, r5
 2f0:	dbf9      	blt.n	2e6 <sendI2CDataArray+0x1e>
	}

	StopCond();
 2f2:	4b03      	ldr	r3, [pc, #12]	; (300 <sendI2CDataArray+0x38>)
 2f4:	4798      	blx	r3
}
 2f6:	bd70      	pop	{r4, r5, r6, pc}
 2f8:	42001400 	.word	0x42001400
 2fc:	000002a1 	.word	0x000002a1
 300:	000002b5 	.word	0x000002b5

00000304 <receiveI2CDataArray>:

void receiveI2CDataArray(uint8_t SlAddr, uint8_t ptr, uint8_t* ptrData, uint8_t Size) {
 304:	b530      	push	{r4, r5, lr}
	/******************  RELOCATING POINTER BEFORE RECEIVING  *************************/
	/* slave address with write signal (0) */
	SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 0;		   /* Sending slave address in write mode */
 306:	0040      	lsls	r0, r0, #1
 308:	4c18      	ldr	r4, [pc, #96]	; (36c <receiveI2CDataArray+0x68>)
 30a:	6260      	str	r0, [r4, #36]	; 0x24
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0);		   /* MB = 1 if slave NACKS the address */
 30c:	4c17      	ldr	r4, [pc, #92]	; (36c <receiveI2CDataArray+0x68>)
 30e:	7e24      	ldrb	r4, [r4, #24]
 310:	07e4      	lsls	r4, r4, #31
 312:	d5fb      	bpl.n	30c <receiveI2CDataArray+0x8>
	SERCOM3->I2CM.DATA.reg = ptr;					   /* Sending address (seconds) for internal pointer */
 314:	2428      	movs	r4, #40	; 0x28
 316:	4d15      	ldr	r5, [pc, #84]	; (36c <receiveI2CDataArray+0x68>)
 318:	5529      	strb	r1, [r5, r4]
	
	while(SERCOM3->I2CM.INTFLAG.bit.MB ==0){};         /* MB = 1 if slave NACKS the address */
 31a:	4914      	ldr	r1, [pc, #80]	; (36c <receiveI2CDataArray+0x68>)
 31c:	7e09      	ldrb	r1, [r1, #24]
 31e:	07c9      	lsls	r1, r1, #31
 320:	d5fb      	bpl.n	31a <receiveI2CDataArray+0x16>
	
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x1;                 /* Sending repetead start condition */
 322:	4d12      	ldr	r5, [pc, #72]	; (36c <receiveI2CDataArray+0x68>)
 324:	686c      	ldr	r4, [r5, #4]
 326:	4912      	ldr	r1, [pc, #72]	; (370 <receiveI2CDataArray+0x6c>)
 328:	400c      	ands	r4, r1
 32a:	2180      	movs	r1, #128	; 0x80
 32c:	0249      	lsls	r1, r1, #9
 32e:	4321      	orrs	r1, r4
 330:	6069      	str	r1, [r5, #4]
	
	/******************  RECIEVING SEQUENCE  *************************/
	/* slave address with read signal (1) */
	SERCOM3->I2CM.ADDR.reg = (SlAddr << 1) | 1;
 332:	2101      	movs	r1, #1
 334:	4308      	orrs	r0, r1
 336:	6268      	str	r0, [r5, #36]	; 0x24
	while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 338:	490c      	ldr	r1, [pc, #48]	; (36c <receiveI2CDataArray+0x68>)
 33a:	7e09      	ldrb	r1, [r1, #24]
 33c:	0789      	lsls	r1, r1, #30
 33e:	d5fb      	bpl.n	338 <receiveI2CDataArray+0x34>
 340:	2000      	movs	r0, #0
 342:	e008      	b.n	356 <receiveI2CDataArray+0x52>

	for(int i=0; i< Size-1; i++) {
		ptrData[i] = SERCOM3->I2CM.DATA.reg;
 344:	2128      	movs	r1, #40	; 0x28
 346:	4c09      	ldr	r4, [pc, #36]	; (36c <receiveI2CDataArray+0x68>)
 348:	5c61      	ldrb	r1, [r4, r1]
 34a:	5411      	strb	r1, [r2, r0]
		while(SERCOM3->I2CM.INTFLAG.bit.SB==0){};
 34c:	4907      	ldr	r1, [pc, #28]	; (36c <receiveI2CDataArray+0x68>)
 34e:	7e09      	ldrb	r1, [r1, #24]
 350:	0789      	lsls	r1, r1, #30
 352:	d5fb      	bpl.n	34c <receiveI2CDataArray+0x48>
	for(int i=0; i< Size-1; i++) {
 354:	3001      	adds	r0, #1
 356:	1e59      	subs	r1, r3, #1
 358:	4288      	cmp	r0, r1
 35a:	dbf3      	blt.n	344 <receiveI2CDataArray+0x40>
	}
	
	/* After receiving the last byte stop condition will be sent */
	SERCOM3->I2CM.CTRLB.bit.CMD = 0x3;
 35c:	4a03      	ldr	r2, [pc, #12]	; (36c <receiveI2CDataArray+0x68>)
 35e:	6851      	ldr	r1, [r2, #4]
 360:	23c0      	movs	r3, #192	; 0xc0
 362:	029b      	lsls	r3, r3, #10
 364:	430b      	orrs	r3, r1
 366:	6053      	str	r3, [r2, #4]
	
	// Turn off the I2C
	// SERCOM3->I2CM.CTRLA.bit.ENABLE = 0x0u;
}
 368:	bd30      	pop	{r4, r5, pc}
 36a:	46c0      	nop			; (mov r8, r8)
 36c:	42001400 	.word	0x42001400
 370:	fffcffff 	.word	0xfffcffff

00000374 <UARTInit>:
	SERCOM3->I2CM.CTRLA.bit.ENABLE = 0x0u;
	
	return 0;
}

void UARTInit(void) {
 374:	b510      	push	{r4, lr}
	    	/* Initialize the SAM system */
    SystemInit();
 376:	4b1b      	ldr	r3, [pc, #108]	; (3e4 <UARTInit+0x70>)
 378:	4798      	blx	r3
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 37a:	4a1b      	ldr	r2, [pc, #108]	; (3e8 <UARTInit+0x74>)
 37c:	6a11      	ldr	r1, [r2, #32]
 37e:	4b1b      	ldr	r3, [pc, #108]	; (3ec <UARTInit+0x78>)
 380:	400b      	ands	r3, r1
 382:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration*/
	PORT->Group[0].DIR.reg |= (1 << 10);                  /* Pin 10 configured as output */
 384:	4b1a      	ldr	r3, [pc, #104]	; (3f0 <UARTInit+0x7c>)
 386:	6819      	ldr	r1, [r3, #0]
 388:	2280      	movs	r2, #128	; 0x80
 38a:	00d2      	lsls	r2, r2, #3
 38c:	430a      	orrs	r2, r1
 38e:	601a      	str	r2, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA11].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 390:	224b      	movs	r2, #75	; 0x4b
 392:	5c99      	ldrb	r1, [r3, r2]
 394:	2001      	movs	r0, #1
 396:	4301      	orrs	r1, r0
 398:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[PIN_PA10].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 39a:	214a      	movs	r1, #74	; 0x4a
 39c:	5c5a      	ldrb	r2, [r3, r1]
 39e:	4302      	orrs	r2, r0
 3a0:	545a      	strb	r2, [r3, r1]
	
	/*PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[5].reg |= 0x02;                   /* Selecting peripheral function C */
 3a2:	3915      	subs	r1, #21
 3a4:	5c5a      	ldrb	r2, [r3, r1]
 3a6:	2002      	movs	r0, #2
 3a8:	4302      	orrs	r2, r0
 3aa:	b2d2      	uxtb	r2, r2
 3ac:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[5].reg |= 0x20;                   /* Selecting peripheral function C */
 3ae:	5c5a      	ldrb	r2, [r3, r1]
 3b0:	2020      	movs	r0, #32
 3b2:	4302      	orrs	r2, r0
 3b4:	b2d2      	uxtb	r2, r2
 3b6:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	//PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;			  /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
 3b8:	4a0e      	ldr	r2, [pc, #56]	; (3f4 <UARTInit+0x80>)
 3ba:	6a13      	ldr	r3, [r2, #32]
 3bc:	3931      	subs	r1, #49	; 0x31
 3be:	430b      	orrs	r3, r1
 3c0:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 3c2:	4a0d      	ldr	r2, [pc, #52]	; (3f8 <UARTInit+0x84>)
 3c4:	4b0d      	ldr	r3, [pc, #52]	; (3fc <UARTInit+0x88>)
 3c6:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

	
	/* configure SERCOM0 module for UART as Standard Frame, 8 Bit size, No parity, BAUDRATE:9600*/

	SERCOM0->USART.CTRLA.reg =
 3c8:	4b0d      	ldr	r3, [pc, #52]	; (400 <UARTInit+0x8c>)
 3ca:	4a0e      	ldr	r2, [pc, #56]	; (404 <UARTInit+0x90>)
 3cc:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3/*PAD3*/) | SERCOM_USART_CTRLA_TXPO(1/*PAD2*/);
	
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;
	
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
 3ce:	22c0      	movs	r2, #192	; 0xc0
 3d0:	0292      	lsls	r2, r2, #10
 3d2:	605a      	str	r2, [r3, #4]

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
 3d4:	4a0c      	ldr	r2, [pc, #48]	; (408 <UARTInit+0x94>)
 3d6:	819a      	strh	r2, [r3, #12]

	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 3d8:	681a      	ldr	r2, [r3, #0]
 3da:	3902      	subs	r1, #2
 3dc:	430a      	orrs	r2, r1
 3de:	601a      	str	r2, [r3, #0]
 3e0:	bd10      	pop	{r4, pc}
 3e2:	46c0      	nop			; (mov r8, r8)
 3e4:	000001dd 	.word	0x000001dd
 3e8:	40000800 	.word	0x40000800
 3ec:	fffffcff 	.word	0xfffffcff
 3f0:	41004400 	.word	0x41004400
 3f4:	40000400 	.word	0x40000400
 3f8:	00004014 	.word	0x00004014
 3fc:	40000c00 	.word	0x40000c00
 400:	42000800 	.word	0x42000800
 404:	40310004 	.word	0x40310004
 408:	fffffb15 	.word	0xfffffb15

0000040c <main>:
{
 40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 40e:	b087      	sub	sp, #28
	UARTInit();
 410:	4b1c      	ldr	r3, [pc, #112]	; (484 <main+0x78>)
 412:	4798      	blx	r3
	I2C_Init();
 414:	4b1c      	ldr	r3, [pc, #112]	; (488 <main+0x7c>)
 416:	4798      	blx	r3
	rtc.SEC.REG = 0x00;
 418:	aa04      	add	r2, sp, #16
 41a:	2300      	movs	r3, #0
 41c:	7013      	strb	r3, [r2, #0]
	rtc.MIN.REG = 0x40;
 41e:	3340      	adds	r3, #64	; 0x40
 420:	7053      	strb	r3, [r2, #1]
	rtc.HOUR.REG = 0x12;
 422:	3b2e      	subs	r3, #46	; 0x2e
 424:	7093      	strb	r3, [r2, #2]
	rtc.DAY.REG = 0x02;
 426:	3b10      	subs	r3, #16
 428:	70d3      	strb	r3, [r2, #3]
	rtc.DATE.REG = 0x16;
 42a:	3314      	adds	r3, #20
 42c:	7113      	strb	r3, [r2, #4]
	rtc.MONTH.REG = 0x05;
 42e:	3b11      	subs	r3, #17
 430:	7153      	strb	r3, [r2, #5]
	rtc.YEAR.REG = 0x23;
 432:	331e      	adds	r3, #30
 434:	7193      	strb	r3, [r2, #6]
	sendI2CDataArray(SLAVE_ADDR, 0, (uint8_t*)&rtc.SEC.REG, 7);
 436:	3b1c      	subs	r3, #28
 438:	2100      	movs	r1, #0
 43a:	2068      	movs	r0, #104	; 0x68
 43c:	4c13      	ldr	r4, [pc, #76]	; (48c <main+0x80>)
 43e:	47a0      	blx	r4
	myprintf("\n\n\nRTC set\n\n\n");
 440:	4813      	ldr	r0, [pc, #76]	; (490 <main+0x84>)
 442:	4b14      	ldr	r3, [pc, #80]	; (494 <main+0x88>)
 444:	4798      	blx	r3
		receiveI2CDataArray(SLAVE_ADDR, 0, (uint8_t*)&rtc, 7);
 446:	ac04      	add	r4, sp, #16
 448:	2307      	movs	r3, #7
 44a:	0022      	movs	r2, r4
 44c:	2100      	movs	r1, #0
 44e:	2068      	movs	r0, #104	; 0x68
 450:	4d11      	ldr	r5, [pc, #68]	; (498 <main+0x8c>)
 452:	47a8      	blx	r5
		myprintf("\n %02x/%02x/%02x %02x:%02x:%02x", rtc.DATE.REG & 0b00111111, rtc.MONTH.REG & 0b00011111, rtc.YEAR.REG, rtc.HOUR.REG & 0b00011111, rtc.MIN.REG & 0b01111111, rtc.SEC.REG & 0b01111111);
 454:	7923      	ldrb	r3, [r4, #4]
 456:	469c      	mov	ip, r3
 458:	7962      	ldrb	r2, [r4, #5]
 45a:	79a3      	ldrb	r3, [r4, #6]
 45c:	78a6      	ldrb	r6, [r4, #2]
 45e:	7867      	ldrb	r7, [r4, #1]
 460:	7825      	ldrb	r5, [r4, #0]
 462:	201f      	movs	r0, #31
 464:	4002      	ands	r2, r0
 466:	213f      	movs	r1, #63	; 0x3f
 468:	4664      	mov	r4, ip
 46a:	4021      	ands	r1, r4
 46c:	247f      	movs	r4, #127	; 0x7f
 46e:	4025      	ands	r5, r4
 470:	9502      	str	r5, [sp, #8]
 472:	403c      	ands	r4, r7
 474:	9401      	str	r4, [sp, #4]
 476:	4030      	ands	r0, r6
 478:	9000      	str	r0, [sp, #0]
 47a:	4808      	ldr	r0, [pc, #32]	; (49c <main+0x90>)
 47c:	4c05      	ldr	r4, [pc, #20]	; (494 <main+0x88>)
 47e:	47a0      	blx	r4
 480:	e7e1      	b.n	446 <main+0x3a>
 482:	46c0      	nop			; (mov r8, r8)
 484:	00000375 	.word	0x00000375
 488:	000001ed 	.word	0x000001ed
 48c:	000002c9 	.word	0x000002c9
 490:	000008a4 	.word	0x000008a4
 494:	00000555 	.word	0x00000555
 498:	00000305 	.word	0x00000305
 49c:	000008b4 	.word	0x000008b4

000004a0 <sendUART1char>:
static char uc;
static char zs;

static void sendUART1char(char s)
{
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
 4a0:	4b03      	ldr	r3, [pc, #12]	; (4b0 <sendUART1char+0x10>)
 4a2:	7e1b      	ldrb	r3, [r3, #24]
 4a4:	07db      	lsls	r3, r3, #31
 4a6:	d5fb      	bpl.n	4a0 <sendUART1char>
  SERCOM0->USART.DATA.reg = s;
 4a8:	b280      	uxth	r0, r0
 4aa:	4b01      	ldr	r3, [pc, #4]	; (4b0 <sendUART1char+0x10>)
 4ac:	8518      	strh	r0, [r3, #40]	; 0x28
}
 4ae:	4770      	bx	lr
 4b0:	42000800 	.word	0x42000800

000004b4 <myputchar>:

/* "print.h" uses this function for is's printf implementation */
static void myputchar(char c)
{
 4b4:	b510      	push	{r4, lr}
 4b6:	0004      	movs	r4, r0
  if(c=='\n')
 4b8:	280a      	cmp	r0, #10
 4ba:	d003      	beq.n	4c4 <myputchar+0x10>
    sendUART1char('\r');
  sendUART1char(c);
 4bc:	0020      	movs	r0, r4
 4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <myputchar+0x18>)
 4c0:	4798      	blx	r3
}
 4c2:	bd10      	pop	{r4, pc}
    sendUART1char('\r');
 4c4:	200d      	movs	r0, #13
 4c6:	4b01      	ldr	r3, [pc, #4]	; (4cc <myputchar+0x18>)
 4c8:	4798      	blx	r3
 4ca:	e7f7      	b.n	4bc <myputchar+0x8>
 4cc:	000004a1 	.word	0x000004a1

000004d0 <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
 4d0:	4a02      	ldr	r2, [pc, #8]	; (4dc <out+0xc>)
 4d2:	6813      	ldr	r3, [r2, #0]
 4d4:	1c59      	adds	r1, r3, #1
 4d6:	6011      	str	r1, [r2, #0]
 4d8:	7018      	strb	r0, [r3, #0]
    }
 4da:	4770      	bx	lr
 4dc:	20000450 	.word	0x20000450

000004e0 <outDgt>:

static void outDgt(char dgt) {
 4e0:	b510      	push	{r4, lr}
 4e2:	0003      	movs	r3, r0
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 4e4:	2809      	cmp	r0, #9
 4e6:	d907      	bls.n	4f8 <outDgt+0x18>
 4e8:	4a08      	ldr	r2, [pc, #32]	; (50c <outDgt+0x2c>)
 4ea:	7912      	ldrb	r2, [r2, #4]
 4ec:	2a00      	cmp	r2, #0
 4ee:	d101      	bne.n	4f4 <outDgt+0x14>
 4f0:	2057      	movs	r0, #87	; 0x57
 4f2:	e002      	b.n	4fa <outDgt+0x1a>
 4f4:	2037      	movs	r0, #55	; 0x37
 4f6:	e000      	b.n	4fa <outDgt+0x1a>
 4f8:	2030      	movs	r0, #48	; 0x30
 4fa:	18c0      	adds	r0, r0, r3
 4fc:	b2c0      	uxtb	r0, r0
 4fe:	4b04      	ldr	r3, [pc, #16]	; (510 <outDgt+0x30>)
 500:	4798      	blx	r3
	zs=1;
 502:	2201      	movs	r2, #1
 504:	4b01      	ldr	r3, [pc, #4]	; (50c <outDgt+0x2c>)
 506:	715a      	strb	r2, [r3, #5]
    }
 508:	bd10      	pop	{r4, pc}
 50a:	46c0      	nop			; (mov r8, r8)
 50c:	20000450 	.word	0x20000450
 510:	000004d1 	.word	0x000004d1

00000514 <divOut>:
	
static void divOut(unsigned int div) {
 514:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
 516:	4a0d      	ldr	r2, [pc, #52]	; (54c <divOut+0x38>)
 518:	6893      	ldr	r3, [r2, #8]
 51a:	041b      	lsls	r3, r3, #16
 51c:	0c1b      	lsrs	r3, r3, #16
 51e:	6093      	str	r3, [r2, #8]
    unsigned char dgt=0;
 520:	2200      	movs	r2, #0
	while (num>=div) {
 522:	e004      	b.n	52e <divOut+0x1a>
		num -= div;
 524:	1a1b      	subs	r3, r3, r0
 526:	4909      	ldr	r1, [pc, #36]	; (54c <divOut+0x38>)
 528:	608b      	str	r3, [r1, #8]
		dgt++;
 52a:	3201      	adds	r2, #1
 52c:	b2d2      	uxtb	r2, r2
	while (num>=div) {
 52e:	4b07      	ldr	r3, [pc, #28]	; (54c <divOut+0x38>)
 530:	689b      	ldr	r3, [r3, #8]
 532:	4283      	cmp	r3, r0
 534:	d2f6      	bcs.n	524 <divOut+0x10>
		}
	if (zs || dgt>0) 
 536:	4b05      	ldr	r3, [pc, #20]	; (54c <divOut+0x38>)
 538:	795b      	ldrb	r3, [r3, #5]
 53a:	2b00      	cmp	r3, #0
 53c:	d101      	bne.n	542 <divOut+0x2e>
 53e:	2a00      	cmp	r2, #0
 540:	d002      	beq.n	548 <divOut+0x34>
		outDgt(dgt);
 542:	0010      	movs	r0, r2
 544:	4b02      	ldr	r3, [pc, #8]	; (550 <divOut+0x3c>)
 546:	4798      	blx	r3
    }	
 548:	bd10      	pop	{r4, pc}
 54a:	46c0      	nop			; (mov r8, r8)
 54c:	20000450 	.word	0x20000450
 550:	000004e1 	.word	0x000004e1

00000554 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
 554:	b40f      	push	{r0, r1, r2, r3}
 556:	b5f0      	push	{r4, r5, r6, r7, lr}
 558:	46c6      	mov	lr, r8
 55a:	b500      	push	{lr}
 55c:	b082      	sub	sp, #8
 55e:	ab08      	add	r3, sp, #32
 560:	cb10      	ldmia	r3!, {r4}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
 562:	9301      	str	r3, [sp, #4]
	
	while ((ch=*(fmt++))) {
 564:	e0b0      	b.n	6c8 <tfp_printf+0x174>
			myputchar(ch);
			}
		else {
			char lz=0;
			char w=0;
			ch=*(fmt++);
 566:	3402      	adds	r4, #2
 568:	7829      	ldrb	r1, [r5, #0]
			if (ch=='0') {
 56a:	2930      	cmp	r1, #48	; 0x30
 56c:	d019      	beq.n	5a2 <tfp_printf+0x4e>
			char lz=0;
 56e:	2500      	movs	r5, #0
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 570:	000b      	movs	r3, r1
 572:	3b30      	subs	r3, #48	; 0x30
 574:	b2db      	uxtb	r3, r3
 576:	2b09      	cmp	r3, #9
 578:	d929      	bls.n	5ce <tfp_printf+0x7a>
			char w=0;
 57a:	2600      	movs	r6, #0
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
 57c:	4b5b      	ldr	r3, [pc, #364]	; (6ec <tfp_printf+0x198>)
 57e:	001a      	movs	r2, r3
 580:	320c      	adds	r2, #12
 582:	601a      	str	r2, [r3, #0]
			p=bf;
			zs=0;
 584:	2200      	movs	r2, #0
 586:	715a      	strb	r2, [r3, #5]
			switch (ch) {
 588:	2963      	cmp	r1, #99	; 0x63
 58a:	d069      	beq.n	660 <tfp_printf+0x10c>
 58c:	d821      	bhi.n	5d2 <tfp_printf+0x7e>
 58e:	2925      	cmp	r1, #37	; 0x25
 590:	d074      	beq.n	67c <tfp_printf+0x128>
 592:	2958      	cmp	r1, #88	; 0x58
 594:	d024      	beq.n	5e0 <tfp_printf+0x8c>
 596:	2900      	cmp	r1, #0
 598:	d100      	bne.n	59c <tfp_printf+0x48>
 59a:	e0a0      	b.n	6de <tfp_printf+0x18a>
			p=bf;
 59c:	4f53      	ldr	r7, [pc, #332]	; (6ec <tfp_printf+0x198>)
 59e:	370c      	adds	r7, #12
 5a0:	e050      	b.n	644 <tfp_printf+0xf0>
				ch=*(fmt++);
 5a2:	1cac      	adds	r4, r5, #2
 5a4:	7869      	ldrb	r1, [r5, #1]
				lz=1;
 5a6:	2501      	movs	r5, #1
 5a8:	e7e2      	b.n	570 <tfp_printf+0x1c>
					w=(((w<<2)+w)<<1)+ch-'0';
 5aa:	00b2      	lsls	r2, r6, #2
 5ac:	b2d2      	uxtb	r2, r2
 5ae:	18b2      	adds	r2, r6, r2
 5b0:	b2d3      	uxtb	r3, r2
 5b2:	005b      	lsls	r3, r3, #1
 5b4:	b2db      	uxtb	r3, r3
 5b6:	18cb      	adds	r3, r1, r3
 5b8:	b2db      	uxtb	r3, r3
 5ba:	3b30      	subs	r3, #48	; 0x30
 5bc:	b2de      	uxtb	r6, r3
					ch=*fmt++;
 5be:	7821      	ldrb	r1, [r4, #0]
 5c0:	3401      	adds	r4, #1
				while (ch>='0' && ch<='9') {
 5c2:	000b      	movs	r3, r1
 5c4:	3b30      	subs	r3, #48	; 0x30
 5c6:	b2db      	uxtb	r3, r3
 5c8:	2b09      	cmp	r3, #9
 5ca:	d9ee      	bls.n	5aa <tfp_printf+0x56>
 5cc:	e7d6      	b.n	57c <tfp_printf+0x28>
 5ce:	2600      	movs	r6, #0
 5d0:	e7f7      	b.n	5c2 <tfp_printf+0x6e>
			switch (ch) {
 5d2:	2973      	cmp	r1, #115	; 0x73
 5d4:	d04d      	beq.n	672 <tfp_printf+0x11e>
 5d6:	d91c      	bls.n	612 <tfp_printf+0xbe>
 5d8:	2975      	cmp	r1, #117	; 0x75
 5da:	d01c      	beq.n	616 <tfp_printf+0xc2>
 5dc:	2978      	cmp	r1, #120	; 0x78
 5de:	d1dd      	bne.n	59c <tfp_printf+0x48>
					divOut(10);
					outDgt(num);
					break;
				case 'x': 
				case 'X' : 
				    uc= ch=='X';
 5e0:	3958      	subs	r1, #88	; 0x58
 5e2:	424b      	negs	r3, r1
 5e4:	414b      	adcs	r3, r1
 5e6:	4f41      	ldr	r7, [pc, #260]	; (6ec <tfp_printf+0x198>)
 5e8:	713b      	strb	r3, [r7, #4]
					num=va_arg(va, unsigned int);
 5ea:	9b01      	ldr	r3, [sp, #4]
 5ec:	1d1a      	adds	r2, r3, #4
 5ee:	9201      	str	r2, [sp, #4]
 5f0:	681b      	ldr	r3, [r3, #0]
 5f2:	60bb      	str	r3, [r7, #8]
					divOut(0x1000);
 5f4:	2080      	movs	r0, #128	; 0x80
 5f6:	0140      	lsls	r0, r0, #5
 5f8:	4b3d      	ldr	r3, [pc, #244]	; (6f0 <tfp_printf+0x19c>)
 5fa:	4698      	mov	r8, r3
 5fc:	4798      	blx	r3
					divOut(0x100);
 5fe:	2080      	movs	r0, #128	; 0x80
 600:	0040      	lsls	r0, r0, #1
 602:	47c0      	blx	r8
					divOut(0x10);
 604:	2010      	movs	r0, #16
 606:	47c0      	blx	r8
					outDgt(num);
 608:	7a38      	ldrb	r0, [r7, #8]
 60a:	4b3a      	ldr	r3, [pc, #232]	; (6f4 <tfp_printf+0x1a0>)
 60c:	4798      	blx	r3
			p=bf;
 60e:	370c      	adds	r7, #12
					break;
 610:	e018      	b.n	644 <tfp_printf+0xf0>
			switch (ch) {
 612:	2964      	cmp	r1, #100	; 0x64
 614:	d1c2      	bne.n	59c <tfp_printf+0x48>
					num=va_arg(va, unsigned int);
 616:	9b01      	ldr	r3, [sp, #4]
 618:	1d1a      	adds	r2, r3, #4
 61a:	9201      	str	r2, [sp, #4]
 61c:	681b      	ldr	r3, [r3, #0]
 61e:	4a33      	ldr	r2, [pc, #204]	; (6ec <tfp_printf+0x198>)
 620:	6093      	str	r3, [r2, #8]
					if (ch=='d' && (int)num<0) {
 622:	2964      	cmp	r1, #100	; 0x64
 624:	d014      	beq.n	650 <tfp_printf+0xfc>
					divOut(10000);
 626:	4834      	ldr	r0, [pc, #208]	; (6f8 <tfp_printf+0x1a4>)
 628:	4f31      	ldr	r7, [pc, #196]	; (6f0 <tfp_printf+0x19c>)
 62a:	47b8      	blx	r7
					divOut(1000);
 62c:	20fa      	movs	r0, #250	; 0xfa
 62e:	0080      	lsls	r0, r0, #2
 630:	47b8      	blx	r7
					divOut(100);
 632:	2064      	movs	r0, #100	; 0x64
 634:	47b8      	blx	r7
					divOut(10);
 636:	200a      	movs	r0, #10
 638:	47b8      	blx	r7
					outDgt(num);
 63a:	4f2c      	ldr	r7, [pc, #176]	; (6ec <tfp_printf+0x198>)
 63c:	7a38      	ldrb	r0, [r7, #8]
 63e:	4b2d      	ldr	r3, [pc, #180]	; (6f4 <tfp_printf+0x1a0>)
 640:	4798      	blx	r3
			p=bf;
 642:	370c      	adds	r7, #12
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
 644:	4b29      	ldr	r3, [pc, #164]	; (6ec <tfp_printf+0x198>)
 646:	2200      	movs	r2, #0
 648:	6819      	ldr	r1, [r3, #0]
 64a:	700a      	strb	r2, [r1, #0]
			bf=p;
 64c:	601f      	str	r7, [r3, #0]
			while (*bf++ && w > 0)
 64e:	e01d      	b.n	68c <tfp_printf+0x138>
					if (ch=='d' && (int)num<0) {
 650:	2b00      	cmp	r3, #0
 652:	dae8      	bge.n	626 <tfp_printf+0xd2>
						num = -(int)num;
 654:	425b      	negs	r3, r3
 656:	6093      	str	r3, [r2, #8]
						out('-');
 658:	202d      	movs	r0, #45	; 0x2d
 65a:	4b28      	ldr	r3, [pc, #160]	; (6fc <tfp_printf+0x1a8>)
 65c:	4798      	blx	r3
 65e:	e7e2      	b.n	626 <tfp_printf+0xd2>
					out((char)(va_arg(va, int)));
 660:	9b01      	ldr	r3, [sp, #4]
 662:	1d1a      	adds	r2, r3, #4
 664:	9201      	str	r2, [sp, #4]
 666:	7818      	ldrb	r0, [r3, #0]
 668:	4b24      	ldr	r3, [pc, #144]	; (6fc <tfp_printf+0x1a8>)
 66a:	4798      	blx	r3
			p=bf;
 66c:	4f1f      	ldr	r7, [pc, #124]	; (6ec <tfp_printf+0x198>)
 66e:	370c      	adds	r7, #12
					break;
 670:	e7e8      	b.n	644 <tfp_printf+0xf0>
					p=va_arg(va, char*);
 672:	9b01      	ldr	r3, [sp, #4]
 674:	1d1a      	adds	r2, r3, #4
 676:	9201      	str	r2, [sp, #4]
 678:	681f      	ldr	r7, [r3, #0]
					break;
 67a:	e7e3      	b.n	644 <tfp_printf+0xf0>
					out('%');
 67c:	2025      	movs	r0, #37	; 0x25
 67e:	4b1f      	ldr	r3, [pc, #124]	; (6fc <tfp_printf+0x1a8>)
 680:	4798      	blx	r3
			p=bf;
 682:	4f1a      	ldr	r7, [pc, #104]	; (6ec <tfp_printf+0x198>)
 684:	370c      	adds	r7, #12
 686:	e7dd      	b.n	644 <tfp_printf+0xf0>
				w--;
 688:	3e01      	subs	r6, #1
 68a:	b2f6      	uxtb	r6, r6
			while (*bf++ && w > 0)
 68c:	4a17      	ldr	r2, [pc, #92]	; (6ec <tfp_printf+0x198>)
 68e:	6813      	ldr	r3, [r2, #0]
 690:	1c59      	adds	r1, r3, #1
 692:	6011      	str	r1, [r2, #0]
 694:	781b      	ldrb	r3, [r3, #0]
 696:	2b00      	cmp	r3, #0
 698:	d006      	beq.n	6a8 <tfp_printf+0x154>
 69a:	2e00      	cmp	r6, #0
 69c:	d1f4      	bne.n	688 <tfp_printf+0x134>
 69e:	e003      	b.n	6a8 <tfp_printf+0x154>
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
 6a0:	2020      	movs	r0, #32
 6a2:	4b17      	ldr	r3, [pc, #92]	; (700 <tfp_printf+0x1ac>)
 6a4:	4798      	blx	r3
			while (w-- > 0) 
 6a6:	4646      	mov	r6, r8
 6a8:	1e73      	subs	r3, r6, #1
 6aa:	b2db      	uxtb	r3, r3
 6ac:	4698      	mov	r8, r3
 6ae:	2e00      	cmp	r6, #0
 6b0:	d006      	beq.n	6c0 <tfp_printf+0x16c>
				myputchar(lz ? '0' : ' ');
 6b2:	2d00      	cmp	r5, #0
 6b4:	d0f4      	beq.n	6a0 <tfp_printf+0x14c>
 6b6:	2030      	movs	r0, #48	; 0x30
 6b8:	e7f3      	b.n	6a2 <tfp_printf+0x14e>
			while ((ch= *p++))
				myputchar(ch);
 6ba:	4b11      	ldr	r3, [pc, #68]	; (700 <tfp_printf+0x1ac>)
 6bc:	4798      	blx	r3
			while ((ch= *p++))
 6be:	002f      	movs	r7, r5
 6c0:	1c7d      	adds	r5, r7, #1
 6c2:	7838      	ldrb	r0, [r7, #0]
 6c4:	2800      	cmp	r0, #0
 6c6:	d1f8      	bne.n	6ba <tfp_printf+0x166>
	while ((ch=*(fmt++))) {
 6c8:	1c65      	adds	r5, r4, #1
 6ca:	7820      	ldrb	r0, [r4, #0]
 6cc:	2800      	cmp	r0, #0
 6ce:	d006      	beq.n	6de <tfp_printf+0x18a>
		if (ch!='%') {
 6d0:	2825      	cmp	r0, #37	; 0x25
 6d2:	d100      	bne.n	6d6 <tfp_printf+0x182>
 6d4:	e747      	b.n	566 <tfp_printf+0x12>
			myputchar(ch);
 6d6:	4b0a      	ldr	r3, [pc, #40]	; (700 <tfp_printf+0x1ac>)
 6d8:	4798      	blx	r3
	while ((ch=*(fmt++))) {
 6da:	002c      	movs	r4, r5
 6dc:	e7f4      	b.n	6c8 <tfp_printf+0x174>
			}
		}
	abort:;
	va_end(va);
	}
 6de:	b002      	add	sp, #8
 6e0:	bc04      	pop	{r2}
 6e2:	4690      	mov	r8, r2
 6e4:	bcf0      	pop	{r4, r5, r6, r7}
 6e6:	bc08      	pop	{r3}
 6e8:	b004      	add	sp, #16
 6ea:	4718      	bx	r3
 6ec:	20000450 	.word	0x20000450
 6f0:	00000515 	.word	0x00000515
 6f4:	000004e1 	.word	0x000004e1
 6f8:	00002710 	.word	0x00002710
 6fc:	000004d1 	.word	0x000004d1
 700:	000004b5 	.word	0x000004b5

00000704 <__libc_init_array>:
 704:	b570      	push	{r4, r5, r6, lr}
 706:	4e0d      	ldr	r6, [pc, #52]	; (73c <__libc_init_array+0x38>)
 708:	4d0d      	ldr	r5, [pc, #52]	; (740 <__libc_init_array+0x3c>)
 70a:	2400      	movs	r4, #0
 70c:	1bad      	subs	r5, r5, r6
 70e:	10ad      	asrs	r5, r5, #2
 710:	d005      	beq.n	71e <__libc_init_array+0x1a>
 712:	00a3      	lsls	r3, r4, #2
 714:	58f3      	ldr	r3, [r6, r3]
 716:	3401      	adds	r4, #1
 718:	4798      	blx	r3
 71a:	42a5      	cmp	r5, r4
 71c:	d1f9      	bne.n	712 <__libc_init_array+0xe>
 71e:	f000 f8db 	bl	8d8 <_init>
 722:	4e08      	ldr	r6, [pc, #32]	; (744 <__libc_init_array+0x40>)
 724:	4d08      	ldr	r5, [pc, #32]	; (748 <__libc_init_array+0x44>)
 726:	2400      	movs	r4, #0
 728:	1bad      	subs	r5, r5, r6
 72a:	10ad      	asrs	r5, r5, #2
 72c:	d005      	beq.n	73a <__libc_init_array+0x36>
 72e:	00a3      	lsls	r3, r4, #2
 730:	58f3      	ldr	r3, [r6, r3]
 732:	3401      	adds	r4, #1
 734:	4798      	blx	r3
 736:	42a5      	cmp	r5, r4
 738:	d1f9      	bne.n	72e <__libc_init_array+0x2a>
 73a:	bd70      	pop	{r4, r5, r6, pc}
 73c:	000008e4 	.word	0x000008e4
 740:	000008e4 	.word	0x000008e4
 744:	000008e4 	.word	0x000008e4
 748:	000008ec 	.word	0x000008ec

0000074c <register_fini>:
 74c:	4b03      	ldr	r3, [pc, #12]	; (75c <register_fini+0x10>)
 74e:	b510      	push	{r4, lr}
 750:	2b00      	cmp	r3, #0
 752:	d002      	beq.n	75a <register_fini+0xe>
 754:	4802      	ldr	r0, [pc, #8]	; (760 <register_fini+0x14>)
 756:	f000 f805 	bl	764 <atexit>
 75a:	bd10      	pop	{r4, pc}
 75c:	00000000 	.word	0x00000000
 760:	00000775 	.word	0x00000775

00000764 <atexit>:
 764:	b510      	push	{r4, lr}
 766:	0001      	movs	r1, r0
 768:	2300      	movs	r3, #0
 76a:	2200      	movs	r2, #0
 76c:	2000      	movs	r0, #0
 76e:	f000 f81f 	bl	7b0 <__register_exitproc>
 772:	bd10      	pop	{r4, pc}

00000774 <__libc_fini_array>:
 774:	b570      	push	{r4, r5, r6, lr}
 776:	4b09      	ldr	r3, [pc, #36]	; (79c <__libc_fini_array+0x28>)
 778:	4c09      	ldr	r4, [pc, #36]	; (7a0 <__libc_fini_array+0x2c>)
 77a:	1ae4      	subs	r4, r4, r3
 77c:	10a4      	asrs	r4, r4, #2
 77e:	d009      	beq.n	794 <__libc_fini_array+0x20>
 780:	4a08      	ldr	r2, [pc, #32]	; (7a4 <__libc_fini_array+0x30>)
 782:	18a5      	adds	r5, r4, r2
 784:	00ad      	lsls	r5, r5, #2
 786:	18ed      	adds	r5, r5, r3
 788:	682b      	ldr	r3, [r5, #0]
 78a:	3c01      	subs	r4, #1
 78c:	4798      	blx	r3
 78e:	3d04      	subs	r5, #4
 790:	2c00      	cmp	r4, #0
 792:	d1f9      	bne.n	788 <__libc_fini_array+0x14>
 794:	f000 f8aa 	bl	8ec <_fini>
 798:	bd70      	pop	{r4, r5, r6, pc}
 79a:	46c0      	nop			; (mov r8, r8)
 79c:	000008f8 	.word	0x000008f8
 7a0:	000008fc 	.word	0x000008fc
 7a4:	3fffffff 	.word	0x3fffffff

000007a8 <__retarget_lock_acquire_recursive>:
 7a8:	4770      	bx	lr
 7aa:	46c0      	nop			; (mov r8, r8)

000007ac <__retarget_lock_release_recursive>:
 7ac:	4770      	bx	lr
 7ae:	46c0      	nop			; (mov r8, r8)

000007b0 <__register_exitproc>:
 7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 7b2:	464e      	mov	r6, r9
 7b4:	4645      	mov	r5, r8
 7b6:	46de      	mov	lr, fp
 7b8:	4657      	mov	r7, sl
 7ba:	b5e0      	push	{r5, r6, r7, lr}
 7bc:	4d36      	ldr	r5, [pc, #216]	; (898 <__register_exitproc+0xe8>)
 7be:	b083      	sub	sp, #12
 7c0:	0006      	movs	r6, r0
 7c2:	6828      	ldr	r0, [r5, #0]
 7c4:	4698      	mov	r8, r3
 7c6:	000f      	movs	r7, r1
 7c8:	4691      	mov	r9, r2
 7ca:	f7ff ffed 	bl	7a8 <__retarget_lock_acquire_recursive>
 7ce:	4b33      	ldr	r3, [pc, #204]	; (89c <__register_exitproc+0xec>)
 7d0:	681c      	ldr	r4, [r3, #0]
 7d2:	23a4      	movs	r3, #164	; 0xa4
 7d4:	005b      	lsls	r3, r3, #1
 7d6:	58e0      	ldr	r0, [r4, r3]
 7d8:	2800      	cmp	r0, #0
 7da:	d052      	beq.n	882 <__register_exitproc+0xd2>
 7dc:	6843      	ldr	r3, [r0, #4]
 7de:	2b1f      	cmp	r3, #31
 7e0:	dc13      	bgt.n	80a <__register_exitproc+0x5a>
 7e2:	1c5a      	adds	r2, r3, #1
 7e4:	9201      	str	r2, [sp, #4]
 7e6:	2e00      	cmp	r6, #0
 7e8:	d128      	bne.n	83c <__register_exitproc+0x8c>
 7ea:	9a01      	ldr	r2, [sp, #4]
 7ec:	3302      	adds	r3, #2
 7ee:	009b      	lsls	r3, r3, #2
 7f0:	6042      	str	r2, [r0, #4]
 7f2:	501f      	str	r7, [r3, r0]
 7f4:	6828      	ldr	r0, [r5, #0]
 7f6:	f7ff ffd9 	bl	7ac <__retarget_lock_release_recursive>
 7fa:	2000      	movs	r0, #0
 7fc:	b003      	add	sp, #12
 7fe:	bc3c      	pop	{r2, r3, r4, r5}
 800:	4690      	mov	r8, r2
 802:	4699      	mov	r9, r3
 804:	46a2      	mov	sl, r4
 806:	46ab      	mov	fp, r5
 808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a:	4b25      	ldr	r3, [pc, #148]	; (8a0 <__register_exitproc+0xf0>)
 80c:	2b00      	cmp	r3, #0
 80e:	d03d      	beq.n	88c <__register_exitproc+0xdc>
 810:	20c8      	movs	r0, #200	; 0xc8
 812:	0040      	lsls	r0, r0, #1
 814:	e000      	b.n	818 <__register_exitproc+0x68>
 816:	bf00      	nop
 818:	2800      	cmp	r0, #0
 81a:	d037      	beq.n	88c <__register_exitproc+0xdc>
 81c:	22a4      	movs	r2, #164	; 0xa4
 81e:	2300      	movs	r3, #0
 820:	0052      	lsls	r2, r2, #1
 822:	58a1      	ldr	r1, [r4, r2]
 824:	6043      	str	r3, [r0, #4]
 826:	6001      	str	r1, [r0, #0]
 828:	50a0      	str	r0, [r4, r2]
 82a:	3240      	adds	r2, #64	; 0x40
 82c:	5083      	str	r3, [r0, r2]
 82e:	3204      	adds	r2, #4
 830:	5083      	str	r3, [r0, r2]
 832:	3301      	adds	r3, #1
 834:	9301      	str	r3, [sp, #4]
 836:	2300      	movs	r3, #0
 838:	2e00      	cmp	r6, #0
 83a:	d0d6      	beq.n	7ea <__register_exitproc+0x3a>
 83c:	009a      	lsls	r2, r3, #2
 83e:	4692      	mov	sl, r2
 840:	4482      	add	sl, r0
 842:	464a      	mov	r2, r9
 844:	2188      	movs	r1, #136	; 0x88
 846:	4654      	mov	r4, sl
 848:	5062      	str	r2, [r4, r1]
 84a:	22c4      	movs	r2, #196	; 0xc4
 84c:	0052      	lsls	r2, r2, #1
 84e:	4691      	mov	r9, r2
 850:	4481      	add	r9, r0
 852:	464a      	mov	r2, r9
 854:	3987      	subs	r1, #135	; 0x87
 856:	4099      	lsls	r1, r3
 858:	6812      	ldr	r2, [r2, #0]
 85a:	468b      	mov	fp, r1
 85c:	430a      	orrs	r2, r1
 85e:	4694      	mov	ip, r2
 860:	464a      	mov	r2, r9
 862:	4661      	mov	r1, ip
 864:	6011      	str	r1, [r2, #0]
 866:	2284      	movs	r2, #132	; 0x84
 868:	4641      	mov	r1, r8
 86a:	0052      	lsls	r2, r2, #1
 86c:	50a1      	str	r1, [r4, r2]
 86e:	2e02      	cmp	r6, #2
 870:	d1bb      	bne.n	7ea <__register_exitproc+0x3a>
 872:	0002      	movs	r2, r0
 874:	465c      	mov	r4, fp
 876:	328d      	adds	r2, #141	; 0x8d
 878:	32ff      	adds	r2, #255	; 0xff
 87a:	6811      	ldr	r1, [r2, #0]
 87c:	430c      	orrs	r4, r1
 87e:	6014      	str	r4, [r2, #0]
 880:	e7b3      	b.n	7ea <__register_exitproc+0x3a>
 882:	0020      	movs	r0, r4
 884:	304d      	adds	r0, #77	; 0x4d
 886:	30ff      	adds	r0, #255	; 0xff
 888:	50e0      	str	r0, [r4, r3]
 88a:	e7a7      	b.n	7dc <__register_exitproc+0x2c>
 88c:	6828      	ldr	r0, [r5, #0]
 88e:	f7ff ff8d 	bl	7ac <__retarget_lock_release_recursive>
 892:	2001      	movs	r0, #1
 894:	4240      	negs	r0, r0
 896:	e7b1      	b.n	7fc <__register_exitproc+0x4c>
 898:	20000430 	.word	0x20000430
 89c:	000008d4 	.word	0x000008d4
 8a0:	00000000 	.word	0x00000000
 8a4:	520a0a0a 	.word	0x520a0a0a
 8a8:	73204354 	.word	0x73204354
 8ac:	0a0a7465 	.word	0x0a0a7465
 8b0:	0000000a 	.word	0x0000000a
 8b4:	3025200a 	.word	0x3025200a
 8b8:	252f7832 	.word	0x252f7832
 8bc:	2f783230 	.word	0x2f783230
 8c0:	78323025 	.word	0x78323025
 8c4:	32302520 	.word	0x32302520
 8c8:	30253a78 	.word	0x30253a78
 8cc:	253a7832 	.word	0x253a7832
 8d0:	00783230 	.word	0x00783230

000008d4 <_global_impure_ptr>:
 8d4:	20000008                                ... 

000008d8 <_init>:
 8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8da:	46c0      	nop			; (mov r8, r8)
 8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8de:	bc08      	pop	{r3}
 8e0:	469e      	mov	lr, r3
 8e2:	4770      	bx	lr

000008e4 <__init_array_start>:
 8e4:	0000074d 	.word	0x0000074d

000008e8 <__frame_dummy_init_array_entry>:
 8e8:	000000dd                                ....

000008ec <_fini>:
 8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8ee:	46c0      	nop			; (mov r8, r8)
 8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8f2:	bc08      	pop	{r3}
 8f4:	469e      	mov	lr, r3
 8f6:	4770      	bx	lr

000008f8 <__fini_array_start>:
 8f8:	000000b5 	.word	0x000000b5

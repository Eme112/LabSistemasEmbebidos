
Practica07_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000007f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  20000434  00000c2c  00020434  2**2
                  ALLOC
  3 .stack        00002004  2000048c  00000c84  00020434  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a1ac  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  0002a661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000b27  00000000  00000000  0002ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000100  00000000  00000000  0002b99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0002ba9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001136f  00000000  00000000  0002bb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001e3e  00000000  00000000  0003cee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006ee95  00000000  00000000  0003ed20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000003e8  00000000  00000000  000adbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	90 24 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .$. ............
	...
  2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
  3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
  9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
  ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000434 	.word	0x20000434
  d4:	00000000 	.word	0x00000000
  d8:	000007f8 	.word	0x000007f8

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000438 	.word	0x20000438
 108:	000007f8 	.word	0x000007f8
 10c:	000007f8 	.word	0x000007f8
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
 118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
 11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
 11e:	429a      	cmp	r2, r3
 120:	d009      	beq.n	136 <Reset_Handler+0x1e>
 122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
 124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
 126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 128:	6811      	ldr	r1, [r2, #0]
 12a:	6019      	str	r1, [r3, #0]
 12c:	3304      	adds	r3, #4
 12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
 132:	428b      	cmp	r3, r1
 134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
 138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
 13a:	2200      	movs	r2, #0
 13c:	601a      	str	r2, [r3, #0]
 13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
 142:	4293      	cmp	r3, r2
 144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
 148:	21ff      	movs	r1, #255	; 0xff
 14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
 14c:	438b      	bics	r3, r1
 14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 150:	39fd      	subs	r1, #253	; 0xfd
 152:	2390      	movs	r3, #144	; 0x90
 154:	005b      	lsls	r3, r3, #1
 156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
 158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
 15c:	78d3      	ldrb	r3, [r2, #3]
 15e:	2503      	movs	r5, #3
 160:	43ab      	bics	r3, r5
 162:	2402      	movs	r4, #2
 164:	4323      	orrs	r3, r4
 166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 168:	78d3      	ldrb	r3, [r2, #3]
 16a:	270c      	movs	r7, #12
 16c:	43bb      	bics	r3, r7
 16e:	2608      	movs	r6, #8
 170:	4333      	orrs	r3, r6
 172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
 176:	7b98      	ldrb	r0, [r3, #14]
 178:	2230      	movs	r2, #48	; 0x30
 17a:	4390      	bics	r0, r2
 17c:	2220      	movs	r2, #32
 17e:	4310      	orrs	r0, r2
 180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 182:	7b99      	ldrb	r1, [r3, #14]
 184:	43b9      	bics	r1, r7
 186:	4331      	orrs	r1, r6
 188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 18a:	7b9a      	ldrb	r2, [r3, #14]
 18c:	43aa      	bics	r2, r5
 18e:	4322      	orrs	r2, r4
 190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
 194:	6851      	ldr	r1, [r2, #4]
 196:	2380      	movs	r3, #128	; 0x80
 198:	430b      	orrs	r3, r1
 19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
 19e:	4798      	blx	r3
        main();
 1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
 1a2:	4798      	blx	r3
 1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
 1a6:	46c0      	nop			; (mov r8, r8)
 1a8:	000007f8 	.word	0x000007f8
 1ac:	20000000 	.word	0x20000000
 1b0:	20000434 	.word	0x20000434
 1b4:	20000434 	.word	0x20000434
 1b8:	2000048c 	.word	0x2000048c
 1bc:	e000ed00 	.word	0xe000ed00
 1c0:	00000000 	.word	0x00000000
 1c4:	41007000 	.word	0x41007000
 1c8:	41005000 	.word	0x41005000
 1cc:	41004800 	.word	0x41004800
 1d0:	41004000 	.word	0x41004000
 1d4:	000005f9 	.word	0x000005f9
 1d8:	000005b5 	.word	0x000005b5

000001dc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
        // Keep the default device state after reset
        SystemCoreClock = __SYSTEM_CLOCK;
 1dc:	4a01      	ldr	r2, [pc, #4]	; (1e4 <SystemInit+0x8>)
 1de:	4b02      	ldr	r3, [pc, #8]	; (1e8 <SystemInit+0xc>)
 1e0:	601a      	str	r2, [r3, #0]
        return;
}
 1e2:	4770      	bx	lr
 1e4:	000f4240 	.word	0x000f4240
 1e8:	20000000 	.word	0x20000000

000001ec <sendUART1char>:
static char uc;
static char zs;

static void sendUART1char(char s)
{
  while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
 1ec:	4b03      	ldr	r3, [pc, #12]	; (1fc <sendUART1char+0x10>)
 1ee:	7e1b      	ldrb	r3, [r3, #24]
 1f0:	07db      	lsls	r3, r3, #31
 1f2:	d5fb      	bpl.n	1ec <sendUART1char>
  SERCOM0->USART.DATA.reg = s;
 1f4:	b280      	uxth	r0, r0
 1f6:	4b01      	ldr	r3, [pc, #4]	; (1fc <sendUART1char+0x10>)
 1f8:	8518      	strh	r0, [r3, #40]	; 0x28
}
 1fa:	4770      	bx	lr
 1fc:	42000800 	.word	0x42000800

00000200 <myputchar>:

/* "print.h" uses this function for is's printf implementation */
static void myputchar(char c)
{
 200:	b510      	push	{r4, lr}
 202:	0004      	movs	r4, r0
  if(c=='\n')
 204:	280a      	cmp	r0, #10
 206:	d003      	beq.n	210 <myputchar+0x10>
    sendUART1char('\r');
  sendUART1char(c);
 208:	0020      	movs	r0, r4
 20a:	4b03      	ldr	r3, [pc, #12]	; (218 <myputchar+0x18>)
 20c:	4798      	blx	r3
}
 20e:	bd10      	pop	{r4, pc}
    sendUART1char('\r');
 210:	200d      	movs	r0, #13
 212:	4b01      	ldr	r3, [pc, #4]	; (218 <myputchar+0x18>)
 214:	4798      	blx	r3
 216:	e7f7      	b.n	208 <myputchar+0x8>
 218:	000001ed 	.word	0x000001ed

0000021c <out>:
    //return 0;
//}


static void out(char c) {
    *bf++ = c;
 21c:	4a02      	ldr	r2, [pc, #8]	; (228 <out+0xc>)
 21e:	6813      	ldr	r3, [r2, #0]
 220:	1c59      	adds	r1, r3, #1
 222:	6011      	str	r1, [r2, #0]
 224:	7018      	strb	r0, [r3, #0]
    }
 226:	4770      	bx	lr
 228:	20000450 	.word	0x20000450

0000022c <outDgt>:

static void outDgt(char dgt) {
 22c:	b510      	push	{r4, lr}
 22e:	0003      	movs	r3, r0
	out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 230:	2809      	cmp	r0, #9
 232:	d907      	bls.n	244 <outDgt+0x18>
 234:	4a08      	ldr	r2, [pc, #32]	; (258 <outDgt+0x2c>)
 236:	7912      	ldrb	r2, [r2, #4]
 238:	2a00      	cmp	r2, #0
 23a:	d101      	bne.n	240 <outDgt+0x14>
 23c:	2057      	movs	r0, #87	; 0x57
 23e:	e002      	b.n	246 <outDgt+0x1a>
 240:	2037      	movs	r0, #55	; 0x37
 242:	e000      	b.n	246 <outDgt+0x1a>
 244:	2030      	movs	r0, #48	; 0x30
 246:	18c0      	adds	r0, r0, r3
 248:	b2c0      	uxtb	r0, r0
 24a:	4b04      	ldr	r3, [pc, #16]	; (25c <outDgt+0x30>)
 24c:	4798      	blx	r3
	zs=1;
 24e:	2201      	movs	r2, #1
 250:	4b01      	ldr	r3, [pc, #4]	; (258 <outDgt+0x2c>)
 252:	715a      	strb	r2, [r3, #5]
    }
 254:	bd10      	pop	{r4, pc}
 256:	46c0      	nop			; (mov r8, r8)
 258:	20000450 	.word	0x20000450
 25c:	0000021d 	.word	0x0000021d

00000260 <divOut>:
	
static void divOut(unsigned int div) {
 260:	b510      	push	{r4, lr}
    unsigned char dgt=0;
	num &= 0xffff; // just for testing the code  with 32 bit ints
 262:	4a0d      	ldr	r2, [pc, #52]	; (298 <divOut+0x38>)
 264:	6893      	ldr	r3, [r2, #8]
 266:	041b      	lsls	r3, r3, #16
 268:	0c1b      	lsrs	r3, r3, #16
 26a:	6093      	str	r3, [r2, #8]
    unsigned char dgt=0;
 26c:	2200      	movs	r2, #0
	while (num>=div) {
 26e:	e004      	b.n	27a <divOut+0x1a>
		num -= div;
 270:	1a1b      	subs	r3, r3, r0
 272:	4909      	ldr	r1, [pc, #36]	; (298 <divOut+0x38>)
 274:	608b      	str	r3, [r1, #8]
		dgt++;
 276:	3201      	adds	r2, #1
 278:	b2d2      	uxtb	r2, r2
	while (num>=div) {
 27a:	4b07      	ldr	r3, [pc, #28]	; (298 <divOut+0x38>)
 27c:	689b      	ldr	r3, [r3, #8]
 27e:	4283      	cmp	r3, r0
 280:	d2f6      	bcs.n	270 <divOut+0x10>
		}
	if (zs || dgt>0) 
 282:	4b05      	ldr	r3, [pc, #20]	; (298 <divOut+0x38>)
 284:	795b      	ldrb	r3, [r3, #5]
 286:	2b00      	cmp	r3, #0
 288:	d101      	bne.n	28e <divOut+0x2e>
 28a:	2a00      	cmp	r2, #0
 28c:	d002      	beq.n	294 <divOut+0x34>
		outDgt(dgt);
 28e:	0010      	movs	r0, r2
 290:	4b02      	ldr	r3, [pc, #8]	; (29c <divOut+0x3c>)
 292:	4798      	blx	r3
    }	
 294:	bd10      	pop	{r4, pc}
 296:	46c0      	nop			; (mov r8, r8)
 298:	20000450 	.word	0x20000450
 29c:	0000022d 	.word	0x0000022d

000002a0 <tfp_printf>:

void tfp_printf(char *fmt, ...)
	{
 2a0:	b40f      	push	{r0, r1, r2, r3}
 2a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 2a4:	46c6      	mov	lr, r8
 2a6:	b500      	push	{lr}
 2a8:	b082      	sub	sp, #8
 2aa:	ab08      	add	r3, sp, #32
 2ac:	cb10      	ldmia	r3!, {r4}
	va_list va;
	char ch;
	char* p;
	
	va_start(va,fmt);
 2ae:	9301      	str	r3, [sp, #4]
	
	while ((ch=*(fmt++))) {
 2b0:	e0b0      	b.n	414 <tfp_printf+0x174>
			myputchar(ch);
			}
		else {
			char lz=0;
			char w=0;
			ch=*(fmt++);
 2b2:	3402      	adds	r4, #2
 2b4:	7829      	ldrb	r1, [r5, #0]
			if (ch=='0') {
 2b6:	2930      	cmp	r1, #48	; 0x30
 2b8:	d019      	beq.n	2ee <tfp_printf+0x4e>
			char lz=0;
 2ba:	2500      	movs	r5, #0
				ch=*(fmt++);
				lz=1;
				}
			if (ch>='0' && ch<='9') {
 2bc:	000b      	movs	r3, r1
 2be:	3b30      	subs	r3, #48	; 0x30
 2c0:	b2db      	uxtb	r3, r3
 2c2:	2b09      	cmp	r3, #9
 2c4:	d929      	bls.n	31a <tfp_printf+0x7a>
			char w=0;
 2c6:	2600      	movs	r6, #0
				while (ch>='0' && ch<='9') {
					w=(((w<<2)+w)<<1)+ch-'0';
					ch=*fmt++;
					}
				}
			bf=buf;
 2c8:	4b5b      	ldr	r3, [pc, #364]	; (438 <tfp_printf+0x198>)
 2ca:	001a      	movs	r2, r3
 2cc:	320c      	adds	r2, #12
 2ce:	601a      	str	r2, [r3, #0]
			p=bf;
			zs=0;
 2d0:	2200      	movs	r2, #0
 2d2:	715a      	strb	r2, [r3, #5]
			switch (ch) {
 2d4:	2963      	cmp	r1, #99	; 0x63
 2d6:	d069      	beq.n	3ac <tfp_printf+0x10c>
 2d8:	d821      	bhi.n	31e <tfp_printf+0x7e>
 2da:	2925      	cmp	r1, #37	; 0x25
 2dc:	d074      	beq.n	3c8 <tfp_printf+0x128>
 2de:	2958      	cmp	r1, #88	; 0x58
 2e0:	d024      	beq.n	32c <tfp_printf+0x8c>
 2e2:	2900      	cmp	r1, #0
 2e4:	d100      	bne.n	2e8 <tfp_printf+0x48>
 2e6:	e0a0      	b.n	42a <tfp_printf+0x18a>
			p=bf;
 2e8:	4f53      	ldr	r7, [pc, #332]	; (438 <tfp_printf+0x198>)
 2ea:	370c      	adds	r7, #12
 2ec:	e050      	b.n	390 <tfp_printf+0xf0>
				ch=*(fmt++);
 2ee:	1cac      	adds	r4, r5, #2
 2f0:	7869      	ldrb	r1, [r5, #1]
				lz=1;
 2f2:	2501      	movs	r5, #1
 2f4:	e7e2      	b.n	2bc <tfp_printf+0x1c>
					w=(((w<<2)+w)<<1)+ch-'0';
 2f6:	00b2      	lsls	r2, r6, #2
 2f8:	b2d2      	uxtb	r2, r2
 2fa:	18b2      	adds	r2, r6, r2
 2fc:	b2d3      	uxtb	r3, r2
 2fe:	005b      	lsls	r3, r3, #1
 300:	b2db      	uxtb	r3, r3
 302:	18cb      	adds	r3, r1, r3
 304:	b2db      	uxtb	r3, r3
 306:	3b30      	subs	r3, #48	; 0x30
 308:	b2de      	uxtb	r6, r3
					ch=*fmt++;
 30a:	7821      	ldrb	r1, [r4, #0]
 30c:	3401      	adds	r4, #1
				while (ch>='0' && ch<='9') {
 30e:	000b      	movs	r3, r1
 310:	3b30      	subs	r3, #48	; 0x30
 312:	b2db      	uxtb	r3, r3
 314:	2b09      	cmp	r3, #9
 316:	d9ee      	bls.n	2f6 <tfp_printf+0x56>
 318:	e7d6      	b.n	2c8 <tfp_printf+0x28>
 31a:	2600      	movs	r6, #0
 31c:	e7f7      	b.n	30e <tfp_printf+0x6e>
			switch (ch) {
 31e:	2973      	cmp	r1, #115	; 0x73
 320:	d04d      	beq.n	3be <tfp_printf+0x11e>
 322:	d91c      	bls.n	35e <tfp_printf+0xbe>
 324:	2975      	cmp	r1, #117	; 0x75
 326:	d01c      	beq.n	362 <tfp_printf+0xc2>
 328:	2978      	cmp	r1, #120	; 0x78
 32a:	d1dd      	bne.n	2e8 <tfp_printf+0x48>
					divOut(10);
					outDgt(num);
					break;
				case 'x': 
				case 'X' : 
				    uc= ch=='X';
 32c:	3958      	subs	r1, #88	; 0x58
 32e:	424b      	negs	r3, r1
 330:	414b      	adcs	r3, r1
 332:	4f41      	ldr	r7, [pc, #260]	; (438 <tfp_printf+0x198>)
 334:	713b      	strb	r3, [r7, #4]
					num=va_arg(va, unsigned int);
 336:	9b01      	ldr	r3, [sp, #4]
 338:	1d1a      	adds	r2, r3, #4
 33a:	9201      	str	r2, [sp, #4]
 33c:	681b      	ldr	r3, [r3, #0]
 33e:	60bb      	str	r3, [r7, #8]
					divOut(0x1000);
 340:	2080      	movs	r0, #128	; 0x80
 342:	0140      	lsls	r0, r0, #5
 344:	4b3d      	ldr	r3, [pc, #244]	; (43c <tfp_printf+0x19c>)
 346:	4698      	mov	r8, r3
 348:	4798      	blx	r3
					divOut(0x100);
 34a:	2080      	movs	r0, #128	; 0x80
 34c:	0040      	lsls	r0, r0, #1
 34e:	47c0      	blx	r8
					divOut(0x10);
 350:	2010      	movs	r0, #16
 352:	47c0      	blx	r8
					outDgt(num);
 354:	7a38      	ldrb	r0, [r7, #8]
 356:	4b3a      	ldr	r3, [pc, #232]	; (440 <tfp_printf+0x1a0>)
 358:	4798      	blx	r3
			p=bf;
 35a:	370c      	adds	r7, #12
					break;
 35c:	e018      	b.n	390 <tfp_printf+0xf0>
			switch (ch) {
 35e:	2964      	cmp	r1, #100	; 0x64
 360:	d1c2      	bne.n	2e8 <tfp_printf+0x48>
					num=va_arg(va, unsigned int);
 362:	9b01      	ldr	r3, [sp, #4]
 364:	1d1a      	adds	r2, r3, #4
 366:	9201      	str	r2, [sp, #4]
 368:	681b      	ldr	r3, [r3, #0]
 36a:	4a33      	ldr	r2, [pc, #204]	; (438 <tfp_printf+0x198>)
 36c:	6093      	str	r3, [r2, #8]
					if (ch=='d' && (int)num<0) {
 36e:	2964      	cmp	r1, #100	; 0x64
 370:	d014      	beq.n	39c <tfp_printf+0xfc>
					divOut(10000);
 372:	4834      	ldr	r0, [pc, #208]	; (444 <tfp_printf+0x1a4>)
 374:	4f31      	ldr	r7, [pc, #196]	; (43c <tfp_printf+0x19c>)
 376:	47b8      	blx	r7
					divOut(1000);
 378:	20fa      	movs	r0, #250	; 0xfa
 37a:	0080      	lsls	r0, r0, #2
 37c:	47b8      	blx	r7
					divOut(100);
 37e:	2064      	movs	r0, #100	; 0x64
 380:	47b8      	blx	r7
					divOut(10);
 382:	200a      	movs	r0, #10
 384:	47b8      	blx	r7
					outDgt(num);
 386:	4f2c      	ldr	r7, [pc, #176]	; (438 <tfp_printf+0x198>)
 388:	7a38      	ldrb	r0, [r7, #8]
 38a:	4b2d      	ldr	r3, [pc, #180]	; (440 <tfp_printf+0x1a0>)
 38c:	4798      	blx	r3
			p=bf;
 38e:	370c      	adds	r7, #12
				case '%' :
					out('%');
				default:
					break;
				}
			*bf=0;
 390:	4b29      	ldr	r3, [pc, #164]	; (438 <tfp_printf+0x198>)
 392:	2200      	movs	r2, #0
 394:	6819      	ldr	r1, [r3, #0]
 396:	700a      	strb	r2, [r1, #0]
			bf=p;
 398:	601f      	str	r7, [r3, #0]
			while (*bf++ && w > 0)
 39a:	e01d      	b.n	3d8 <tfp_printf+0x138>
					if (ch=='d' && (int)num<0) {
 39c:	2b00      	cmp	r3, #0
 39e:	dae8      	bge.n	372 <tfp_printf+0xd2>
						num = -(int)num;
 3a0:	425b      	negs	r3, r3
 3a2:	6093      	str	r3, [r2, #8]
						out('-');
 3a4:	202d      	movs	r0, #45	; 0x2d
 3a6:	4b28      	ldr	r3, [pc, #160]	; (448 <tfp_printf+0x1a8>)
 3a8:	4798      	blx	r3
 3aa:	e7e2      	b.n	372 <tfp_printf+0xd2>
					out((char)(va_arg(va, int)));
 3ac:	9b01      	ldr	r3, [sp, #4]
 3ae:	1d1a      	adds	r2, r3, #4
 3b0:	9201      	str	r2, [sp, #4]
 3b2:	7818      	ldrb	r0, [r3, #0]
 3b4:	4b24      	ldr	r3, [pc, #144]	; (448 <tfp_printf+0x1a8>)
 3b6:	4798      	blx	r3
			p=bf;
 3b8:	4f1f      	ldr	r7, [pc, #124]	; (438 <tfp_printf+0x198>)
 3ba:	370c      	adds	r7, #12
					break;
 3bc:	e7e8      	b.n	390 <tfp_printf+0xf0>
					p=va_arg(va, char*);
 3be:	9b01      	ldr	r3, [sp, #4]
 3c0:	1d1a      	adds	r2, r3, #4
 3c2:	9201      	str	r2, [sp, #4]
 3c4:	681f      	ldr	r7, [r3, #0]
					break;
 3c6:	e7e3      	b.n	390 <tfp_printf+0xf0>
					out('%');
 3c8:	2025      	movs	r0, #37	; 0x25
 3ca:	4b1f      	ldr	r3, [pc, #124]	; (448 <tfp_printf+0x1a8>)
 3cc:	4798      	blx	r3
			p=bf;
 3ce:	4f1a      	ldr	r7, [pc, #104]	; (438 <tfp_printf+0x198>)
 3d0:	370c      	adds	r7, #12
 3d2:	e7dd      	b.n	390 <tfp_printf+0xf0>
				w--;
 3d4:	3e01      	subs	r6, #1
 3d6:	b2f6      	uxtb	r6, r6
			while (*bf++ && w > 0)
 3d8:	4a17      	ldr	r2, [pc, #92]	; (438 <tfp_printf+0x198>)
 3da:	6813      	ldr	r3, [r2, #0]
 3dc:	1c59      	adds	r1, r3, #1
 3de:	6011      	str	r1, [r2, #0]
 3e0:	781b      	ldrb	r3, [r3, #0]
 3e2:	2b00      	cmp	r3, #0
 3e4:	d006      	beq.n	3f4 <tfp_printf+0x154>
 3e6:	2e00      	cmp	r6, #0
 3e8:	d1f4      	bne.n	3d4 <tfp_printf+0x134>
 3ea:	e003      	b.n	3f4 <tfp_printf+0x154>
			while (w-- > 0) 
				myputchar(lz ? '0' : ' ');
 3ec:	2020      	movs	r0, #32
 3ee:	4b17      	ldr	r3, [pc, #92]	; (44c <tfp_printf+0x1ac>)
 3f0:	4798      	blx	r3
			while (w-- > 0) 
 3f2:	4646      	mov	r6, r8
 3f4:	1e73      	subs	r3, r6, #1
 3f6:	b2db      	uxtb	r3, r3
 3f8:	4698      	mov	r8, r3
 3fa:	2e00      	cmp	r6, #0
 3fc:	d006      	beq.n	40c <tfp_printf+0x16c>
				myputchar(lz ? '0' : ' ');
 3fe:	2d00      	cmp	r5, #0
 400:	d0f4      	beq.n	3ec <tfp_printf+0x14c>
 402:	2030      	movs	r0, #48	; 0x30
 404:	e7f3      	b.n	3ee <tfp_printf+0x14e>
			while ((ch= *p++))
				myputchar(ch);
 406:	4b11      	ldr	r3, [pc, #68]	; (44c <tfp_printf+0x1ac>)
 408:	4798      	blx	r3
			while ((ch= *p++))
 40a:	002f      	movs	r7, r5
 40c:	1c7d      	adds	r5, r7, #1
 40e:	7838      	ldrb	r0, [r7, #0]
 410:	2800      	cmp	r0, #0
 412:	d1f8      	bne.n	406 <tfp_printf+0x166>
	while ((ch=*(fmt++))) {
 414:	1c65      	adds	r5, r4, #1
 416:	7820      	ldrb	r0, [r4, #0]
 418:	2800      	cmp	r0, #0
 41a:	d006      	beq.n	42a <tfp_printf+0x18a>
		if (ch!='%') {
 41c:	2825      	cmp	r0, #37	; 0x25
 41e:	d100      	bne.n	422 <tfp_printf+0x182>
 420:	e747      	b.n	2b2 <tfp_printf+0x12>
			myputchar(ch);
 422:	4b0a      	ldr	r3, [pc, #40]	; (44c <tfp_printf+0x1ac>)
 424:	4798      	blx	r3
	while ((ch=*(fmt++))) {
 426:	002c      	movs	r4, r5
 428:	e7f4      	b.n	414 <tfp_printf+0x174>
			}
		}
	abort:;
	va_end(va);
	}
 42a:	b002      	add	sp, #8
 42c:	bc04      	pop	{r2}
 42e:	4690      	mov	r8, r2
 430:	bcf0      	pop	{r4, r5, r6, r7}
 432:	bc08      	pop	{r3}
 434:	b004      	add	sp, #16
 436:	4718      	bx	r3
 438:	20000450 	.word	0x20000450
 43c:	00000261 	.word	0x00000261
 440:	0000022d 	.word	0x0000022d
 444:	00002710 	.word	0x00002710
 448:	0000021d 	.word	0x0000021d
 44c:	00000201 	.word	0x00000201

00000450 <spiInit>:
#include "myprintf.h"
#include "spi.h"

void spiInit( void ) {
	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 450:	4a15      	ldr	r2, [pc, #84]	; (4a8 <spiInit+0x58>)
 452:	6a11      	ldr	r1, [r2, #32]
 454:	4b15      	ldr	r3, [pc, #84]	; (4ac <spiInit+0x5c>)
 456:	400b      	ands	r3, r1
 458:	6213      	str	r3, [r2, #32]
	PM->APBCMASK.bit.SERCOM1_ = 1; //enable the clock for SERCOM1 peripheral
 45a:	4a15      	ldr	r2, [pc, #84]	; (4b0 <spiInit+0x60>)
 45c:	6a11      	ldr	r1, [r2, #32]
 45e:	2308      	movs	r3, #8
 460:	430b      	orrs	r3, r1
 462:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 |
 464:	4a13      	ldr	r2, [pc, #76]	; (4b4 <spiInit+0x64>)
 466:	4b14      	ldr	r3, [pc, #80]	; (4b8 <spiInit+0x68>)
 468:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_ID_SERCOM1_CORE;
	while( GCLK->STATUS.bit.SYNCBUSY ) { }
 46a:	4b13      	ldr	r3, [pc, #76]	; (4b8 <spiInit+0x68>)
 46c:	785b      	ldrb	r3, [r3, #1]
 46e:	09db      	lsrs	r3, r3, #7
 470:	d1fb      	bne.n	46a <spiInit+0x1a>
		.bit.FORM = 0, // SPI frame
		.bit.DIPO = 0x3, // MISO on PAD[3]
		.bit.DOPO = 0x0, // MOSI on PAD[0], SCK on PAD[1], SS_ on PAD[2]
		.bit.MODE = 0x3 // Master Mode
	};
	SERCOM1->SPI.CTRLA.reg = ctrla.reg;
 472:	4a12      	ldr	r2, [pc, #72]	; (4bc <spiInit+0x6c>)
 474:	4b12      	ldr	r3, [pc, #72]	; (4c0 <spiInit+0x70>)
 476:	6811      	ldr	r1, [r2, #0]
 478:	6019      	str	r1, [r3, #0]
		.bit.RXEN = 1, // RX enabled
		.bit.MSSEN = 1, // Manual SC
		.bit.CHSIZE = 0 // 8-bit
	};

	SERCOM1->SPI.CTRLB.reg = ctrlb.reg;
 47a:	6851      	ldr	r1, [r2, #4]
 47c:	6059      	str	r1, [r3, #4]
	//Formula to configure the desired baudrate
	uint32_t br = ( double )( 8000000 / ( 2 * BAUDRATE ) ) - 1 ;
	SERCOM1->SPI.BAUD.reg = SERCOM_SPI_BAUD_BAUD( ( uint8_t )br );
 47e:	219f      	movs	r1, #159	; 0x9f
 480:	7319      	strb	r1, [r3, #12]
		.bit.PMUX = MUX_PA16C_SERCOM1_PAD0 | MUX_PA17C_SERCOM1_PAD1 | MUX_PA19C_SERCOM1_PAD3,
		.bit.PMUXEN = 1,
		.bit.HWSEL = 1,
		.bit.PINMASK = ( uint16_t )( ( PORT_PA16 | PORT_PA17 | PORT_PA19 ) >> 16 )
	};
	PORT->Group[0].WRCONFIG.reg = wrconfig.reg;
 482:	6891      	ldr	r1, [r2, #8]
 484:	4a0f      	ldr	r2, [pc, #60]	; (4c4 <spiInit+0x74>)
 486:	6291      	str	r1, [r2, #40]	; 0x28
	//SS/CS (Slave Select/Chip Select) PIN 18 configuration
	REG_PORT_DIRSET0 = PORT_PA18;
 488:	2280      	movs	r2, #128	; 0x80
 48a:	02d2      	lsls	r2, r2, #11
 48c:	490e      	ldr	r1, [pc, #56]	; (4c8 <spiInit+0x78>)
 48e:	600a      	str	r2, [r1, #0]
	REG_PORT_OUTSET0 = PORT_PA18;
 490:	490e      	ldr	r1, [pc, #56]	; (4cc <spiInit+0x7c>)
 492:	600a      	str	r2, [r1, #0]
	//enable the SPI
	SERCOM1->SPI.CTRLA.bit.ENABLE = 1;
 494:	6819      	ldr	r1, [r3, #0]
 496:	2202      	movs	r2, #2
 498:	430a      	orrs	r2, r1
 49a:	601a      	str	r2, [r3, #0]
	while( SERCOM1->SPI.SYNCBUSY.bit.ENABLE ) { }
 49c:	4b08      	ldr	r3, [pc, #32]	; (4c0 <spiInit+0x70>)
 49e:	69db      	ldr	r3, [r3, #28]
 4a0:	079b      	lsls	r3, r3, #30
 4a2:	d4fb      	bmi.n	49c <spiInit+0x4c>
}
 4a4:	4770      	bx	lr
 4a6:	46c0      	nop			; (mov r8, r8)
 4a8:	40000800 	.word	0x40000800
 4ac:	fffffcff 	.word	0xfffffcff
 4b0:	40000400 	.word	0x40000400
 4b4:	00004015 	.word	0x00004015
 4b8:	40000c00 	.word	0x40000c00
 4bc:	00000798 	.word	0x00000798
 4c0:	42000c00 	.word	0x42000c00
 4c4:	41004400 	.word	0x41004400
 4c8:	41004408 	.word	0x41004408
 4cc:	41004418 	.word	0x41004418

000004d0 <spiSend>:

uint8_t spiSend( uint8_t data ) {
 4d0:	b510      	push	{r4, lr}
 4d2:	0001      	movs	r1, r0
	uint8_t temp;
	while(!SERCOM1->SPI.INTFLAG.bit.DRE) { } //wait until buffer is empty
 4d4:	4b0d      	ldr	r3, [pc, #52]	; (50c <spiSend+0x3c>)
 4d6:	7e1b      	ldrb	r3, [r3, #24]
 4d8:	07db      	lsls	r3, r3, #31
 4da:	d5fb      	bpl.n	4d4 <spiSend+0x4>
	SERCOM1->SPI.DATA.reg = SERCOM_SPI_DATA_DATA( data ); //transmit data
 4dc:	4b0b      	ldr	r3, [pc, #44]	; (50c <spiSend+0x3c>)
 4de:	6299      	str	r1, [r3, #40]	; 0x28
	myprintf( "Data sent \t0x%x\n", data ); //printf the value in putty
 4e0:	480b      	ldr	r0, [pc, #44]	; (510 <spiSend+0x40>)
 4e2:	4b0c      	ldr	r3, [pc, #48]	; (514 <spiSend+0x44>)
 4e4:	4798      	blx	r3
	while( !SERCOM1->SPI.INTFLAG.bit.RXC ) { } //wait until a data is received
 4e6:	4b09      	ldr	r3, [pc, #36]	; (50c <spiSend+0x3c>)
 4e8:	7e1b      	ldrb	r3, [r3, #24]
 4ea:	075b      	lsls	r3, r3, #29
 4ec:	d5fb      	bpl.n	4e6 <spiSend+0x16>
	temp = SERCOM1->SPI.DATA.reg; //read data
 4ee:	4b07      	ldr	r3, [pc, #28]	; (50c <spiSend+0x3c>)
 4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 4f2:	b2d4      	uxtb	r4, r2
	while( !SERCOM1->SPI.INTFLAG.bit.TXC ) { } //wait until there is no data to transmit
 4f4:	4b05      	ldr	r3, [pc, #20]	; (50c <spiSend+0x3c>)
 4f6:	7e1b      	ldrb	r3, [r3, #24]
 4f8:	079b      	lsls	r3, r3, #30
 4fa:	d5fb      	bpl.n	4f4 <spiSend+0x24>
	myprintf( "Data received \t0x%x\n", temp ); //printf the value in putty
 4fc:	21ff      	movs	r1, #255	; 0xff
 4fe:	4011      	ands	r1, r2
 500:	4805      	ldr	r0, [pc, #20]	; (518 <spiSend+0x48>)
 502:	4b04      	ldr	r3, [pc, #16]	; (514 <spiSend+0x44>)
 504:	4798      	blx	r3
	return temp;
}
 506:	0020      	movs	r0, r4
 508:	bd10      	pop	{r4, pc}
 50a:	46c0      	nop			; (mov r8, r8)
 50c:	42000c00 	.word	0x42000c00
 510:	000007a4 	.word	0x000007a4
 514:	000002a1 	.word	0x000002a1
 518:	000007b8 	.word	0x000007b8

0000051c <UARTInit>:
		REG_PORT_OUTSET0 = PORT_PA18; //finish transaction by SS_high
		//myprintf(" %x\n", rData);
	}
}

void UARTInit(void) {
 51c:	b510      	push	{r4, lr}
	/* Initialize the SAM system */
	SystemInit();
 51e:	4b1b      	ldr	r3, [pc, #108]	; (58c <UARTInit+0x70>)
 520:	4798      	blx	r3

	/* Switch to 8MHz clock (disable prescaler) */
	SYSCTRL->OSC8M.bit.PRESC = 0;
 522:	4a1b      	ldr	r2, [pc, #108]	; (590 <UARTInit+0x74>)
 524:	6a11      	ldr	r1, [r2, #32]
 526:	4b1b      	ldr	r3, [pc, #108]	; (594 <UARTInit+0x78>)
 528:	400b      	ands	r3, r1
 52a:	6213      	str	r3, [r2, #32]
	
	/* port mux configuration*/
	PORT->Group[0].DIR.reg |= (1 << 10);                  /* Pin 10 configured as output */
 52c:	4b1a      	ldr	r3, [pc, #104]	; (598 <UARTInit+0x7c>)
 52e:	6819      	ldr	r1, [r3, #0]
 530:	2280      	movs	r2, #128	; 0x80
 532:	00d2      	lsls	r2, r2, #3
 534:	430a      	orrs	r2, r1
 536:	601a      	str	r2, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA11].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 538:	224b      	movs	r2, #75	; 0x4b
 53a:	5c99      	ldrb	r1, [r3, r2]
 53c:	2001      	movs	r0, #1
 53e:	4301      	orrs	r1, r0
 540:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[PIN_PA10].bit.PMUXEN = 1;       /* Enabling peripheral functions */
 542:	214a      	movs	r1, #74	; 0x4a
 544:	5c5a      	ldrb	r2, [r3, r1]
 546:	4302      	orrs	r2, r0
 548:	545a      	strb	r2, [r3, r1]
	
	/*PMUX: even = n/2, odd: (n-1)/2 */
	PORT->Group[0].PMUX[5].reg |= 0x02;                   /* Selecting peripheral function C */
 54a:	3915      	subs	r1, #21
 54c:	5c5a      	ldrb	r2, [r3, r1]
 54e:	2002      	movs	r0, #2
 550:	4302      	orrs	r2, r0
 552:	b2d2      	uxtb	r2, r2
 554:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[5].reg |= 0x20;                   /* Selecting peripheral function C */
 556:	5c5a      	ldrb	r2, [r3, r1]
 558:	2020      	movs	r0, #32
 55a:	4302      	orrs	r2, r0
 55c:	b2d2      	uxtb	r2, r2
 55e:	545a      	strb	r2, [r3, r1]
	
	/* APBCMASK */
	//PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;			  /* SERCOM 0 enable*/
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0;
 560:	4a0e      	ldr	r2, [pc, #56]	; (59c <UARTInit+0x80>)
 562:	6a13      	ldr	r3, [r2, #32]
 564:	3931      	subs	r1, #49	; 0x31
 566:	430b      	orrs	r3, r1
 568:	6213      	str	r3, [r2, #32]

	/*GCLK configuration for sercom0 module: using generic clock generator 0, ID for sercom0, enable GCLK*/

	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE) |
 56a:	4a0d      	ldr	r2, [pc, #52]	; (5a0 <UARTInit+0x84>)
 56c:	4b0d      	ldr	r3, [pc, #52]	; (5a4 <UARTInit+0x88>)
 56e:	805a      	strh	r2, [r3, #2]
	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(0);

	
	/* configure SERCOM0 module for UART as Standard Frame, 8 Bit size, No parity, BAUDRATE:9600*/

	SERCOM0->USART.CTRLA.reg =
 570:	4b0d      	ldr	r3, [pc, #52]	; (5a8 <UARTInit+0x8c>)
 572:	4a0e      	ldr	r2, [pc, #56]	; (5ac <UARTInit+0x90>)
 574:	601a      	str	r2, [r3, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
	SERCOM_USART_CTRLA_RXPO(3/*PAD3*/) | SERCOM_USART_CTRLA_TXPO(1/*PAD2*/);
	
	uint64_t br = (uint64_t)65536 * (8000000 - 16 * 9600) / 8000000;
	
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
 576:	22c0      	movs	r2, #192	; 0xc0
 578:	0292      	lsls	r2, r2, #10
 57a:	605a      	str	r2, [r3, #4]

	SERCOM0->USART.BAUD.reg = (uint16_t)br;
 57c:	4a0c      	ldr	r2, [pc, #48]	; (5b0 <UARTInit+0x94>)
 57e:	819a      	strh	r2, [r3, #12]

	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 580:	681a      	ldr	r2, [r3, #0]
 582:	3902      	subs	r1, #2
 584:	430a      	orrs	r2, r1
 586:	601a      	str	r2, [r3, #0]
}
 588:	bd10      	pop	{r4, pc}
 58a:	46c0      	nop			; (mov r8, r8)
 58c:	000001dd 	.word	0x000001dd
 590:	40000800 	.word	0x40000800
 594:	fffffcff 	.word	0xfffffcff
 598:	41004400 	.word	0x41004400
 59c:	40000400 	.word	0x40000400
 5a0:	00004014 	.word	0x00004014
 5a4:	40000c00 	.word	0x40000c00
 5a8:	42000800 	.word	0x42000800
 5ac:	40310004 	.word	0x40310004
 5b0:	fffffb15 	.word	0xfffffb15

000005b4 <main>:
{
 5b4:	b510      	push	{r4, lr}
 5b6:	b082      	sub	sp, #8
	UARTInit();
 5b8:	4b0a      	ldr	r3, [pc, #40]	; (5e4 <main+0x30>)
 5ba:	4798      	blx	r3
	spiInit();
 5bc:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <main+0x34>)
 5be:	4798      	blx	r3
	volatile uint8_t sData = 85;
 5c0:	2255      	movs	r2, #85	; 0x55
 5c2:	466b      	mov	r3, sp
 5c4:	719a      	strb	r2, [r3, #6]
		REG_PORT_OUTCLR0 = PORT_PA18; //initiate transaction by SS_low
 5c6:	2480      	movs	r4, #128	; 0x80
 5c8:	02e4      	lsls	r4, r4, #11
 5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <main+0x38>)
 5cc:	601c      	str	r4, [r3, #0]
		rData = spiSend( sData );
 5ce:	466b      	mov	r3, sp
 5d0:	7998      	ldrb	r0, [r3, #6]
 5d2:	b2c0      	uxtb	r0, r0
 5d4:	4b06      	ldr	r3, [pc, #24]	; (5f0 <main+0x3c>)
 5d6:	4798      	blx	r3
 5d8:	466b      	mov	r3, sp
 5da:	71d8      	strb	r0, [r3, #7]
		REG_PORT_OUTSET0 = PORT_PA18; //finish transaction by SS_high
 5dc:	4b05      	ldr	r3, [pc, #20]	; (5f4 <main+0x40>)
 5de:	601c      	str	r4, [r3, #0]
 5e0:	e7f1      	b.n	5c6 <main+0x12>
 5e2:	46c0      	nop			; (mov r8, r8)
 5e4:	0000051d 	.word	0x0000051d
 5e8:	00000451 	.word	0x00000451
 5ec:	41004414 	.word	0x41004414
 5f0:	000004d1 	.word	0x000004d1
 5f4:	41004418 	.word	0x41004418

000005f8 <__libc_init_array>:
 5f8:	b570      	push	{r4, r5, r6, lr}
 5fa:	4e0d      	ldr	r6, [pc, #52]	; (630 <__libc_init_array+0x38>)
 5fc:	4d0d      	ldr	r5, [pc, #52]	; (634 <__libc_init_array+0x3c>)
 5fe:	2400      	movs	r4, #0
 600:	1bad      	subs	r5, r5, r6
 602:	10ad      	asrs	r5, r5, #2
 604:	d005      	beq.n	612 <__libc_init_array+0x1a>
 606:	00a3      	lsls	r3, r4, #2
 608:	58f3      	ldr	r3, [r6, r3]
 60a:	3401      	adds	r4, #1
 60c:	4798      	blx	r3
 60e:	42a5      	cmp	r5, r4
 610:	d1f9      	bne.n	606 <__libc_init_array+0xe>
 612:	f000 f8df 	bl	7d4 <_init>
 616:	4e08      	ldr	r6, [pc, #32]	; (638 <__libc_init_array+0x40>)
 618:	4d08      	ldr	r5, [pc, #32]	; (63c <__libc_init_array+0x44>)
 61a:	2400      	movs	r4, #0
 61c:	1bad      	subs	r5, r5, r6
 61e:	10ad      	asrs	r5, r5, #2
 620:	d005      	beq.n	62e <__libc_init_array+0x36>
 622:	00a3      	lsls	r3, r4, #2
 624:	58f3      	ldr	r3, [r6, r3]
 626:	3401      	adds	r4, #1
 628:	4798      	blx	r3
 62a:	42a5      	cmp	r5, r4
 62c:	d1f9      	bne.n	622 <__libc_init_array+0x2a>
 62e:	bd70      	pop	{r4, r5, r6, pc}
 630:	000007e0 	.word	0x000007e0
 634:	000007e0 	.word	0x000007e0
 638:	000007e0 	.word	0x000007e0
 63c:	000007e8 	.word	0x000007e8

00000640 <register_fini>:
 640:	4b03      	ldr	r3, [pc, #12]	; (650 <register_fini+0x10>)
 642:	b510      	push	{r4, lr}
 644:	2b00      	cmp	r3, #0
 646:	d002      	beq.n	64e <register_fini+0xe>
 648:	4802      	ldr	r0, [pc, #8]	; (654 <register_fini+0x14>)
 64a:	f000 f805 	bl	658 <atexit>
 64e:	bd10      	pop	{r4, pc}
 650:	00000000 	.word	0x00000000
 654:	00000669 	.word	0x00000669

00000658 <atexit>:
 658:	b510      	push	{r4, lr}
 65a:	0001      	movs	r1, r0
 65c:	2300      	movs	r3, #0
 65e:	2200      	movs	r2, #0
 660:	2000      	movs	r0, #0
 662:	f000 f81f 	bl	6a4 <__register_exitproc>
 666:	bd10      	pop	{r4, pc}

00000668 <__libc_fini_array>:
 668:	b570      	push	{r4, r5, r6, lr}
 66a:	4b09      	ldr	r3, [pc, #36]	; (690 <__libc_fini_array+0x28>)
 66c:	4c09      	ldr	r4, [pc, #36]	; (694 <__libc_fini_array+0x2c>)
 66e:	1ae4      	subs	r4, r4, r3
 670:	10a4      	asrs	r4, r4, #2
 672:	d009      	beq.n	688 <__libc_fini_array+0x20>
 674:	4a08      	ldr	r2, [pc, #32]	; (698 <__libc_fini_array+0x30>)
 676:	18a5      	adds	r5, r4, r2
 678:	00ad      	lsls	r5, r5, #2
 67a:	18ed      	adds	r5, r5, r3
 67c:	682b      	ldr	r3, [r5, #0]
 67e:	3c01      	subs	r4, #1
 680:	4798      	blx	r3
 682:	3d04      	subs	r5, #4
 684:	2c00      	cmp	r4, #0
 686:	d1f9      	bne.n	67c <__libc_fini_array+0x14>
 688:	f000 f8ae 	bl	7e8 <_fini>
 68c:	bd70      	pop	{r4, r5, r6, pc}
 68e:	46c0      	nop			; (mov r8, r8)
 690:	000007f4 	.word	0x000007f4
 694:	000007f8 	.word	0x000007f8
 698:	3fffffff 	.word	0x3fffffff

0000069c <__retarget_lock_acquire_recursive>:
 69c:	4770      	bx	lr
 69e:	46c0      	nop			; (mov r8, r8)

000006a0 <__retarget_lock_release_recursive>:
 6a0:	4770      	bx	lr
 6a2:	46c0      	nop			; (mov r8, r8)

000006a4 <__register_exitproc>:
 6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 6a6:	464e      	mov	r6, r9
 6a8:	4645      	mov	r5, r8
 6aa:	46de      	mov	lr, fp
 6ac:	4657      	mov	r7, sl
 6ae:	b5e0      	push	{r5, r6, r7, lr}
 6b0:	4d36      	ldr	r5, [pc, #216]	; (78c <__register_exitproc+0xe8>)
 6b2:	b083      	sub	sp, #12
 6b4:	0006      	movs	r6, r0
 6b6:	6828      	ldr	r0, [r5, #0]
 6b8:	4698      	mov	r8, r3
 6ba:	000f      	movs	r7, r1
 6bc:	4691      	mov	r9, r2
 6be:	f7ff ffed 	bl	69c <__retarget_lock_acquire_recursive>
 6c2:	4b33      	ldr	r3, [pc, #204]	; (790 <__register_exitproc+0xec>)
 6c4:	681c      	ldr	r4, [r3, #0]
 6c6:	23a4      	movs	r3, #164	; 0xa4
 6c8:	005b      	lsls	r3, r3, #1
 6ca:	58e0      	ldr	r0, [r4, r3]
 6cc:	2800      	cmp	r0, #0
 6ce:	d052      	beq.n	776 <__register_exitproc+0xd2>
 6d0:	6843      	ldr	r3, [r0, #4]
 6d2:	2b1f      	cmp	r3, #31
 6d4:	dc13      	bgt.n	6fe <__register_exitproc+0x5a>
 6d6:	1c5a      	adds	r2, r3, #1
 6d8:	9201      	str	r2, [sp, #4]
 6da:	2e00      	cmp	r6, #0
 6dc:	d128      	bne.n	730 <__register_exitproc+0x8c>
 6de:	9a01      	ldr	r2, [sp, #4]
 6e0:	3302      	adds	r3, #2
 6e2:	009b      	lsls	r3, r3, #2
 6e4:	6042      	str	r2, [r0, #4]
 6e6:	501f      	str	r7, [r3, r0]
 6e8:	6828      	ldr	r0, [r5, #0]
 6ea:	f7ff ffd9 	bl	6a0 <__retarget_lock_release_recursive>
 6ee:	2000      	movs	r0, #0
 6f0:	b003      	add	sp, #12
 6f2:	bc3c      	pop	{r2, r3, r4, r5}
 6f4:	4690      	mov	r8, r2
 6f6:	4699      	mov	r9, r3
 6f8:	46a2      	mov	sl, r4
 6fa:	46ab      	mov	fp, r5
 6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 6fe:	4b25      	ldr	r3, [pc, #148]	; (794 <__register_exitproc+0xf0>)
 700:	2b00      	cmp	r3, #0
 702:	d03d      	beq.n	780 <__register_exitproc+0xdc>
 704:	20c8      	movs	r0, #200	; 0xc8
 706:	0040      	lsls	r0, r0, #1
 708:	e000      	b.n	70c <__register_exitproc+0x68>
 70a:	bf00      	nop
 70c:	2800      	cmp	r0, #0
 70e:	d037      	beq.n	780 <__register_exitproc+0xdc>
 710:	22a4      	movs	r2, #164	; 0xa4
 712:	2300      	movs	r3, #0
 714:	0052      	lsls	r2, r2, #1
 716:	58a1      	ldr	r1, [r4, r2]
 718:	6043      	str	r3, [r0, #4]
 71a:	6001      	str	r1, [r0, #0]
 71c:	50a0      	str	r0, [r4, r2]
 71e:	3240      	adds	r2, #64	; 0x40
 720:	5083      	str	r3, [r0, r2]
 722:	3204      	adds	r2, #4
 724:	5083      	str	r3, [r0, r2]
 726:	3301      	adds	r3, #1
 728:	9301      	str	r3, [sp, #4]
 72a:	2300      	movs	r3, #0
 72c:	2e00      	cmp	r6, #0
 72e:	d0d6      	beq.n	6de <__register_exitproc+0x3a>
 730:	009a      	lsls	r2, r3, #2
 732:	4692      	mov	sl, r2
 734:	4482      	add	sl, r0
 736:	464a      	mov	r2, r9
 738:	2188      	movs	r1, #136	; 0x88
 73a:	4654      	mov	r4, sl
 73c:	5062      	str	r2, [r4, r1]
 73e:	22c4      	movs	r2, #196	; 0xc4
 740:	0052      	lsls	r2, r2, #1
 742:	4691      	mov	r9, r2
 744:	4481      	add	r9, r0
 746:	464a      	mov	r2, r9
 748:	3987      	subs	r1, #135	; 0x87
 74a:	4099      	lsls	r1, r3
 74c:	6812      	ldr	r2, [r2, #0]
 74e:	468b      	mov	fp, r1
 750:	430a      	orrs	r2, r1
 752:	4694      	mov	ip, r2
 754:	464a      	mov	r2, r9
 756:	4661      	mov	r1, ip
 758:	6011      	str	r1, [r2, #0]
 75a:	2284      	movs	r2, #132	; 0x84
 75c:	4641      	mov	r1, r8
 75e:	0052      	lsls	r2, r2, #1
 760:	50a1      	str	r1, [r4, r2]
 762:	2e02      	cmp	r6, #2
 764:	d1bb      	bne.n	6de <__register_exitproc+0x3a>
 766:	0002      	movs	r2, r0
 768:	465c      	mov	r4, fp
 76a:	328d      	adds	r2, #141	; 0x8d
 76c:	32ff      	adds	r2, #255	; 0xff
 76e:	6811      	ldr	r1, [r2, #0]
 770:	430c      	orrs	r4, r1
 772:	6014      	str	r4, [r2, #0]
 774:	e7b3      	b.n	6de <__register_exitproc+0x3a>
 776:	0020      	movs	r0, r4
 778:	304d      	adds	r0, #77	; 0x4d
 77a:	30ff      	adds	r0, #255	; 0xff
 77c:	50e0      	str	r0, [r4, r3]
 77e:	e7a7      	b.n	6d0 <__register_exitproc+0x2c>
 780:	6828      	ldr	r0, [r5, #0]
 782:	f7ff ff8d 	bl	6a0 <__retarget_lock_release_recursive>
 786:	2001      	movs	r0, #1
 788:	4240      	negs	r0, r0
 78a:	e7b1      	b.n	6f0 <__register_exitproc+0x4c>
 78c:	20000430 	.word	0x20000430
 790:	000007d0 	.word	0x000007d0
 794:	00000000 	.word	0x00000000

00000798 <ctrla.10056>:
 798:	0030000c                                ..0.

0000079c <ctrlb.10057>:
 79c:	00022000                                . ..

000007a0 <wrconfig.10059>:
 7a0:	d201000b 61746144 6e657320 30092074     ....Data sent .0
 7b0:	0a782578 00000000 61746144 63657220     x%x.....Data rec
 7c0:	65766965 30092064 0a782578 00000000     eived .0x%x.....

000007d0 <_global_impure_ptr>:
 7d0:	20000008                                ... 

000007d4 <_init>:
 7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7d6:	46c0      	nop			; (mov r8, r8)
 7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7da:	bc08      	pop	{r3}
 7dc:	469e      	mov	lr, r3
 7de:	4770      	bx	lr

000007e0 <__init_array_start>:
 7e0:	00000641 	.word	0x00000641

000007e4 <__frame_dummy_init_array_entry>:
 7e4:	000000dd                                ....

000007e8 <_fini>:
 7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7ea:	46c0      	nop			; (mov r8, r8)
 7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7ee:	bc08      	pop	{r3}
 7f0:	469e      	mov	lr, r3
 7f2:	4770      	bx	lr

000007f4 <__fini_array_start>:
 7f4:	000000b5 	.word	0x000000b5
